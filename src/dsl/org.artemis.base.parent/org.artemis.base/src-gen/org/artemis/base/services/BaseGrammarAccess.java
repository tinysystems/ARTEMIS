/*
 * generated by Xtext 2.25.0
 */
package org.artemis.base.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BaseGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.Model");
		private final Assignment cTypesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypesTypeDeclParserRuleCall_0 = (RuleCall)cTypesAssignment.eContents().get(0);
		
		//Model :
		//    types += TypeDecl+
		//    //('variables' vars+=Variable+)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//types += TypeDecl+
		public Assignment getTypesAssignment() { return cTypesAssignment; }
		
		//TypeDecl
		public RuleCall getTypesTypeDeclParserRuleCall_0() { return cTypesTypeDeclParserRuleCall_0; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.TypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumTypeDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDecl:
		//    EnumTypeDecl | SimpleTypeDecl
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EnumTypeDecl | SimpleTypeDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumTypeDecl
		public RuleCall getEnumTypeDeclParserRuleCall_0() { return cEnumTypeDeclParserRuleCall_0; }
		
		//SimpleTypeDecl
		public RuleCall getSimpleTypeDeclParserRuleCall_1() { return cSimpleTypeDeclParserRuleCall_1; }
	}
	public class SimpleTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.SimpleTypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SimpleTypeDecl :
		//    'type' name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name = ID
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EnumTypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.EnumTypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsEnumElementParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumTypeDecl:
		//    'enum' name = ID '{' literals+=EnumElement+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name = ID '{' literals+=EnumElement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//literals+=EnumElement+
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }
		
		//EnumElement
		public RuleCall getLiteralsEnumElementParserRuleCall_3_0() { return cLiteralsEnumElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.EnumElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumElement:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBaseTypeTypeDeclCrossReference_0_0 = (CrossReference)cBaseTypeAssignment_0.eContents().get(0);
		private final RuleCall cBaseTypeTypeDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cBaseTypeTypeDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Array:
		//    baseType = [TypeDecl | ID]'['']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//baseType = [TypeDecl | ID]'['']'
		public Group getGroup() { return cGroup; }
		
		//baseType = [TypeDecl | ID]
		public Assignment getBaseTypeAssignment_0() { return cBaseTypeAssignment_0; }
		
		//[TypeDecl | ID]
		public CrossReference getBaseTypeTypeDeclCrossReference_0_0() { return cBaseTypeTypeDeclCrossReference_0_0; }
		
		//ID
		public RuleCall getBaseTypeTypeDeclIDTerminalRuleCall_0_0_1() { return cBaseTypeTypeDeclIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Variable: type = Type name= ID ;
		//Type :
		//    TypeRef | Array
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeRef | Array
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeRef
		public RuleCall getTypeRefParserRuleCall_0() { return cTypeRefParserRuleCall_0; }
		
		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.base.Base.TypeRef");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeDeclCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeDeclIDTerminalRuleCall_0_1 = (RuleCall)cTypeTypeDeclCrossReference_0.eContents().get(1);
		
		//TypeRef:
		//    type = [TypeDecl | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = [TypeDecl | ID]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[TypeDecl | ID]
		public CrossReference getTypeTypeDeclCrossReference_0() { return cTypeTypeDeclCrossReference_0; }
		
		//ID
		public RuleCall getTypeTypeDeclIDTerminalRuleCall_0_1() { return cTypeTypeDeclIDTerminalRuleCall_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final TypeDeclElements pTypeDecl;
	private final SimpleTypeDeclElements pSimpleTypeDecl;
	private final EnumTypeDeclElements pEnumTypeDecl;
	private final EnumElementElements pEnumElement;
	private final ArrayElements pArray;
	private final TypeElements pType;
	private final TypeRefElements pTypeRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pSimpleTypeDecl = new SimpleTypeDeclElements();
		this.pEnumTypeDecl = new EnumTypeDeclElements();
		this.pEnumElement = new EnumElementElements();
		this.pArray = new ArrayElements();
		this.pType = new TypeElements();
		this.pTypeRef = new TypeRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.artemis.base.Base".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model :
	//    types += TypeDecl+
	//    //('variables' vars+=Variable+)?
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TypeDecl:
	//    EnumTypeDecl | SimpleTypeDecl
	//;
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//SimpleTypeDecl :
	//    'type' name = ID
	//;
	public SimpleTypeDeclElements getSimpleTypeDeclAccess() {
		return pSimpleTypeDecl;
	}
	
	public ParserRule getSimpleTypeDeclRule() {
		return getSimpleTypeDeclAccess().getRule();
	}
	
	//EnumTypeDecl:
	//    'enum' name = ID '{' literals+=EnumElement+ '}'
	//;
	public EnumTypeDeclElements getEnumTypeDeclAccess() {
		return pEnumTypeDecl;
	}
	
	public ParserRule getEnumTypeDeclRule() {
		return getEnumTypeDeclAccess().getRule();
	}
	
	//EnumElement:
	//    name = ID
	//;
	public EnumElementElements getEnumElementAccess() {
		return pEnumElement;
	}
	
	public ParserRule getEnumElementRule() {
		return getEnumElementAccess().getRule();
	}
	
	//Array:
	//    baseType = [TypeDecl | ID]'['']'
	//;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	////Variable: type = Type name= ID ;
	//Type :
	//    TypeRef | Array
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeRef:
	//    type = [TypeDecl | ID]
	//;
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
