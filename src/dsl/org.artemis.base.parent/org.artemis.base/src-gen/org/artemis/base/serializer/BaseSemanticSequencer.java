/*
 * generated by Xtext 2.25.0
 */
package org.artemis.base.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.artemis.base.base.Array;
import org.artemis.base.base.BasePackage;
import org.artemis.base.base.EnumElement;
import org.artemis.base.base.EnumTypeDecl;
import org.artemis.base.base.Model;
import org.artemis.base.base.SimpleTypeDecl;
import org.artemis.base.base.TypeRef;
import org.artemis.base.services.BaseGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BaseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BaseGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.ARRAY:
				sequence_Array(context, (Array) semanticObject); 
				return; 
			case BasePackage.ENUM_ELEMENT:
				sequence_EnumElement(context, (EnumElement) semanticObject); 
				return; 
			case BasePackage.ENUM_TYPE_DECL:
				sequence_EnumTypeDecl(context, (EnumTypeDecl) semanticObject); 
				return; 
			case BasePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BasePackage.SIMPLE_TYPE_DECL:
				sequence_SimpleTypeDecl(context, (SimpleTypeDecl) semanticObject); 
				return; 
			case BasePackage.TYPE_REF:
				sequence_TypeRef(context, (TypeRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Array returns Array
	 *     Type returns Array
	 *
	 * Constraint:
	 *     baseType=[TypeDecl|ID]
	 */
	protected void sequence_Array(ISerializationContext context, Array semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.ARRAY__BASE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.ARRAY__BASE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArrayAccess().getBaseTypeTypeDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(BasePackage.Literals.ARRAY__BASE_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnumElement returns EnumElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnumElement(ISerializationContext context, EnumElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.ENUM_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.ENUM_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns EnumTypeDecl
	 *     EnumTypeDecl returns EnumTypeDecl
	 *
	 * Constraint:
	 *     (name=ID literals+=EnumElement+)
	 */
	protected void sequence_EnumTypeDecl(ISerializationContext context, EnumTypeDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     types+=TypeDecl+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns SimpleTypeDecl
	 *     SimpleTypeDecl returns SimpleTypeDecl
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SimpleTypeDecl(ISerializationContext context, SimpleTypeDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.TYPE_DECL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.TYPE_DECL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleTypeDeclAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns TypeRef
	 *     TypeRef returns TypeRef
	 *
	 * Constraint:
	 *     type=[TypeDecl|ID]
	 */
	protected void sequence_TypeRef(ISerializationContext context, TypeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.TYPE_REF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.TYPE_REF__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeRefAccess().getTypeTypeDeclIDTerminalRuleCall_0_1(), semanticObject.eGet(BasePackage.Literals.TYPE_REF__TYPE, false));
		feeder.finish();
	}
	
	
}
