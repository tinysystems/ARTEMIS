/**
 * generated by Xtext 2.25.0
 */
package org.artemis.spec.artemis.util;

import org.artemis.spec.artemis.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.artemis.spec.artemis.ArtemisPackage
 * @generated
 */
public class ArtemisAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ArtemisPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArtemisAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ArtemisPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArtemisSwitch<Adapter> modelSwitch =
    new ArtemisSwitch<Adapter>()
    {
      @Override
      public Adapter caseArtemisModel(ArtemisModel object)
      {
        return createArtemisModelAdapter();
      }
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter casePath(Path object)
      {
        return createPathAdapter();
      }
      @Override
      public Adapter caseTaskProperties(TaskProperties object)
      {
        return createTaskPropertiesAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter casePeriod(Period object)
      {
        return createPeriodAdapter();
      }
      @Override
      public Adapter caseMaxTries(MaxTries object)
      {
        return createMaxTriesAdapter();
      }
      @Override
      public Adapter caseMaxDuration(MaxDuration object)
      {
        return createMaxDurationAdapter();
      }
      @Override
      public Adapter caseMitd(Mitd object)
      {
        return createMitdAdapter();
      }
      @Override
      public Adapter caseCollect(Collect object)
      {
        return createCollectAdapter();
      }
      @Override
      public Adapter caseOnFailAction(OnFailAction object)
      {
        return createOnFailActionAdapter();
      }
      @Override
      public Adapter caseRestartPath(RestartPath object)
      {
        return createRestartPathAdapter();
      }
      @Override
      public Adapter caseSkipPath(SkipPath object)
      {
        return createSkipPathAdapter();
      }
      @Override
      public Adapter caseRestartTask(RestartTask object)
      {
        return createRestartTaskAdapter();
      }
      @Override
      public Adapter caseSkipTask(SkipTask object)
      {
        return createSkipTaskAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.ArtemisModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.ArtemisModel
   * @generated
   */
  public Adapter createArtemisModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.Path <em>Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.Path
   * @generated
   */
  public Adapter createPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.TaskProperties <em>Task Properties</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.TaskProperties
   * @generated
   */
  public Adapter createTaskPropertiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.Period <em>Period</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.Period
   * @generated
   */
  public Adapter createPeriodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.MaxTries <em>Max Tries</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.MaxTries
   * @generated
   */
  public Adapter createMaxTriesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.MaxDuration <em>Max Duration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.MaxDuration
   * @generated
   */
  public Adapter createMaxDurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.Mitd <em>Mitd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.Mitd
   * @generated
   */
  public Adapter createMitdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.Collect <em>Collect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.Collect
   * @generated
   */
  public Adapter createCollectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.OnFailAction <em>On Fail Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.OnFailAction
   * @generated
   */
  public Adapter createOnFailActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.RestartPath <em>Restart Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.RestartPath
   * @generated
   */
  public Adapter createRestartPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.SkipPath <em>Skip Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.SkipPath
   * @generated
   */
  public Adapter createSkipPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.RestartTask <em>Restart Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.RestartTask
   * @generated
   */
  public Adapter createRestartTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.artemis.spec.artemis.SkipTask <em>Skip Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.artemis.spec.artemis.SkipTask
   * @generated
   */
  public Adapter createSkipTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ArtemisAdapterFactory
