/*
 * generated by Xtext 2.25.0
 */
package org.artemis.spec.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.artemis.spec.artemis.ArtemisModel;
import org.artemis.spec.artemis.ArtemisPackage;
import org.artemis.spec.artemis.Collect;
import org.artemis.spec.artemis.MaxDuration;
import org.artemis.spec.artemis.MaxTries;
import org.artemis.spec.artemis.Mitd;
import org.artemis.spec.artemis.Path;
import org.artemis.spec.artemis.Period;
import org.artemis.spec.artemis.RestartPath;
import org.artemis.spec.artemis.RestartTask;
import org.artemis.spec.artemis.SkipPath;
import org.artemis.spec.artemis.SkipTask;
import org.artemis.spec.artemis.Task;
import org.artemis.spec.artemis.TaskProperties;
import org.artemis.spec.services.ArtemisGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ArtemisSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ArtemisGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ArtemisPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArtemisPackage.ARTEMIS_MODEL:
				sequence_ArtemisModel(context, (ArtemisModel) semanticObject); 
				return; 
			case ArtemisPackage.COLLECT:
				sequence_Collect(context, (Collect) semanticObject); 
				return; 
			case ArtemisPackage.MAX_DURATION:
				sequence_MaxDuration(context, (MaxDuration) semanticObject); 
				return; 
			case ArtemisPackage.MAX_TRIES:
				sequence_MaxTries(context, (MaxTries) semanticObject); 
				return; 
			case ArtemisPackage.MITD:
				sequence_Mitd(context, (Mitd) semanticObject); 
				return; 
			case ArtemisPackage.PATH:
				sequence_Path(context, (Path) semanticObject); 
				return; 
			case ArtemisPackage.PERIOD:
				sequence_Period(context, (Period) semanticObject); 
				return; 
			case ArtemisPackage.RESTART_PATH:
				sequence_RestartPath(context, (RestartPath) semanticObject); 
				return; 
			case ArtemisPackage.RESTART_TASK:
				sequence_RestartTask(context, (RestartTask) semanticObject); 
				return; 
			case ArtemisPackage.SKIP_PATH:
				sequence_SkipPath(context, (SkipPath) semanticObject); 
				return; 
			case ArtemisPackage.SKIP_TASK:
				sequence_SkipTask(context, (SkipTask) semanticObject); 
				return; 
			case ArtemisPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case ArtemisPackage.TASK_PROPERTIES:
				sequence_TaskProperties(context, (TaskProperties) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArtemisModel returns ArtemisModel
	 *
	 * Constraint:
	 *     (tasks+=Task+ paths+=Path+ taskProperties+=TaskProperties+)
	 */
	protected void sequence_ArtemisModel(ISerializationContext context, ArtemisModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Collect
	 *     Collect returns Collect
	 *
	 * Constraint:
	 *     (nrItems=INT dependsOn=[Task|ID] onFailAction=OnFailAction)
	 */
	protected void sequence_Collect(ISerializationContext context, Collect semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.COLLECT__NR_ITEMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.COLLECT__NR_ITEMS));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.COLLECT__DEPENDS_ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.COLLECT__DEPENDS_ON));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCollectAccess().getNrItemsINTTerminalRuleCall_1_0(), semanticObject.getNrItems());
		feeder.accept(grammarAccess.getCollectAccess().getDependsOnTaskIDTerminalRuleCall_3_0_1(), semanticObject.eGet(ArtemisPackage.Literals.COLLECT__DEPENDS_ON, false));
		feeder.accept(grammarAccess.getCollectAccess().getOnFailActionOnFailActionParserRuleCall_5_0(), semanticObject.getOnFailAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns MaxDuration
	 *     MaxDuration returns MaxDuration
	 *
	 * Constraint:
	 *     (maxDuration=FLOAT onFailAction=OnFailAction)
	 */
	protected void sequence_MaxDuration(ISerializationContext context, MaxDuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.MAX_DURATION__MAX_DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.MAX_DURATION__MAX_DURATION));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxDurationAccess().getMaxDurationFLOATTerminalRuleCall_1_0(), semanticObject.getMaxDuration());
		feeder.accept(grammarAccess.getMaxDurationAccess().getOnFailActionOnFailActionParserRuleCall_4_0(), semanticObject.getOnFailAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns MaxTries
	 *     MaxTries returns MaxTries
	 *
	 * Constraint:
	 *     (nrTries=INT onFailAction=OnFailAction)
	 */
	protected void sequence_MaxTries(ISerializationContext context, MaxTries semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.MAX_TRIES__NR_TRIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.MAX_TRIES__NR_TRIES));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaxTriesAccess().getNrTriesINTTerminalRuleCall_1_0(), semanticObject.getNrTries());
		feeder.accept(grammarAccess.getMaxTriesAccess().getOnFailActionOnFailActionParserRuleCall_3_0(), semanticObject.getOnFailAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Mitd
	 *     Mitd returns Mitd
	 *
	 * Constraint:
	 *     (duration=FLOAT dependsOn=[Task|ID] onFailAction=OnFailAction maxAttempts=INT onFailMaxAttemptAction=OnFailAction)
	 */
	protected void sequence_Mitd(ISerializationContext context, Mitd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.MITD__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.MITD__DURATION));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.MITD__DEPENDS_ON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.MITD__DEPENDS_ON));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.MITD__MAX_ATTEMPTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.MITD__MAX_ATTEMPTS));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.MITD__ON_FAIL_MAX_ATTEMPT_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.MITD__ON_FAIL_MAX_ATTEMPT_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMitdAccess().getDurationFLOATTerminalRuleCall_1_0(), semanticObject.getDuration());
		feeder.accept(grammarAccess.getMitdAccess().getDependsOnTaskIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ArtemisPackage.Literals.MITD__DEPENDS_ON, false));
		feeder.accept(grammarAccess.getMitdAccess().getOnFailActionOnFailActionParserRuleCall_6_0(), semanticObject.getOnFailAction());
		feeder.accept(grammarAccess.getMitdAccess().getMaxAttemptsINTTerminalRuleCall_8_0(), semanticObject.getMaxAttempts());
		feeder.accept(grammarAccess.getMitdAccess().getOnFailMaxAttemptActionOnFailActionParserRuleCall_10_0(), semanticObject.getOnFailMaxAttemptAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Path returns Path
	 *
	 * Constraint:
	 *     (id=INT tasks+=[Task|ID]+)
	 */
	protected void sequence_Path(ISerializationContext context, Path semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Period
	 *     Period returns Period
	 *
	 * Constraint:
	 *     (period=FLOAT onFailAction=OnFailAction maxAttempts=INT onFailMaxAttemptAction=OnFailAction)
	 */
	protected void sequence_Period(ISerializationContext context, Period semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PERIOD__PERIOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PERIOD__PERIOD));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PROPERTY__ON_FAIL_ACTION));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PERIOD__MAX_ATTEMPTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PERIOD__MAX_ATTEMPTS));
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.PERIOD__ON_FAIL_MAX_ATTEMPT_ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.PERIOD__ON_FAIL_MAX_ATTEMPT_ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPeriodAccess().getPeriodFLOATTerminalRuleCall_1_0(), semanticObject.getPeriod());
		feeder.accept(grammarAccess.getPeriodAccess().getOnFailActionOnFailActionParserRuleCall_4_0(), semanticObject.getOnFailAction());
		feeder.accept(grammarAccess.getPeriodAccess().getMaxAttemptsINTTerminalRuleCall_6_0(), semanticObject.getMaxAttempts());
		feeder.accept(grammarAccess.getPeriodAccess().getOnFailMaxAttemptActionOnFailActionParserRuleCall_8_0(), semanticObject.getOnFailMaxAttemptAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OnFailAction returns RestartPath
	 *     RestartPath returns RestartPath
	 *
	 * Constraint:
	 *     path=INT?
	 */
	protected void sequence_RestartPath(ISerializationContext context, RestartPath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OnFailAction returns RestartTask
	 *     RestartTask returns RestartTask
	 *
	 * Constraint:
	 *     {RestartTask}
	 */
	protected void sequence_RestartTask(ISerializationContext context, RestartTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OnFailAction returns SkipPath
	 *     SkipPath returns SkipPath
	 *
	 * Constraint:
	 *     path=INT?
	 */
	protected void sequence_SkipPath(ISerializationContext context, SkipPath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OnFailAction returns SkipTask
	 *     SkipTask returns SkipTask
	 *
	 * Constraint:
	 *     {SkipTask}
	 */
	protected void sequence_SkipTask(ISerializationContext context, SkipTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaskProperties returns TaskProperties
	 *
	 * Constraint:
	 *     (task=[Task|ID] properties+=Property+)
	 */
	protected void sequence_TaskProperties(ISerializationContext context, TaskProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArtemisPackage.Literals.TASK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArtemisPackage.Literals.TASK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
