/**
 * generated by Xtext 2.25.0
 */
package org.artemis.spec.artemis.impl;

import org.artemis.spec.artemis.ArtemisPackage;
import org.artemis.spec.artemis.Mitd;
import org.artemis.spec.artemis.OnFailAction;
import org.artemis.spec.artemis.Task;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mitd</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.artemis.spec.artemis.impl.MitdImpl#getDuration <em>Duration</em>}</li>
 *   <li>{@link org.artemis.spec.artemis.impl.MitdImpl#getDependsOn <em>Depends On</em>}</li>
 *   <li>{@link org.artemis.spec.artemis.impl.MitdImpl#getMaxAttempts <em>Max Attempts</em>}</li>
 *   <li>{@link org.artemis.spec.artemis.impl.MitdImpl#getOnFailMaxAttemptAction <em>On Fail Max Attempt Action</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MitdImpl extends PropertyImpl implements Mitd
{
  /**
   * The default value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected static final double DURATION_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected double duration = DURATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getDependsOn() <em>Depends On</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependsOn()
   * @generated
   * @ordered
   */
  protected Task dependsOn;

  /**
   * The default value of the '{@link #getMaxAttempts() <em>Max Attempts</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxAttempts()
   * @generated
   * @ordered
   */
  protected static final int MAX_ATTEMPTS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaxAttempts() <em>Max Attempts</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxAttempts()
   * @generated
   * @ordered
   */
  protected int maxAttempts = MAX_ATTEMPTS_EDEFAULT;

  /**
   * The cached value of the '{@link #getOnFailMaxAttemptAction() <em>On Fail Max Attempt Action</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOnFailMaxAttemptAction()
   * @generated
   * @ordered
   */
  protected OnFailAction onFailMaxAttemptAction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MitdImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArtemisPackage.Literals.MITD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getDuration()
  {
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDuration(double newDuration)
  {
    double oldDuration = duration;
    duration = newDuration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArtemisPackage.MITD__DURATION, oldDuration, duration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task getDependsOn()
  {
    if (dependsOn != null && dependsOn.eIsProxy())
    {
      InternalEObject oldDependsOn = (InternalEObject)dependsOn;
      dependsOn = (Task)eResolveProxy(oldDependsOn);
      if (dependsOn != oldDependsOn)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ArtemisPackage.MITD__DEPENDS_ON, oldDependsOn, dependsOn));
      }
    }
    return dependsOn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task basicGetDependsOn()
  {
    return dependsOn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDependsOn(Task newDependsOn)
  {
    Task oldDependsOn = dependsOn;
    dependsOn = newDependsOn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArtemisPackage.MITD__DEPENDS_ON, oldDependsOn, dependsOn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMaxAttempts()
  {
    return maxAttempts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxAttempts(int newMaxAttempts)
  {
    int oldMaxAttempts = maxAttempts;
    maxAttempts = newMaxAttempts;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArtemisPackage.MITD__MAX_ATTEMPTS, oldMaxAttempts, maxAttempts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnFailAction getOnFailMaxAttemptAction()
  {
    return onFailMaxAttemptAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOnFailMaxAttemptAction(OnFailAction newOnFailMaxAttemptAction, NotificationChain msgs)
  {
    OnFailAction oldOnFailMaxAttemptAction = onFailMaxAttemptAction;
    onFailMaxAttemptAction = newOnFailMaxAttemptAction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION, oldOnFailMaxAttemptAction, newOnFailMaxAttemptAction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnFailMaxAttemptAction(OnFailAction newOnFailMaxAttemptAction)
  {
    if (newOnFailMaxAttemptAction != onFailMaxAttemptAction)
    {
      NotificationChain msgs = null;
      if (onFailMaxAttemptAction != null)
        msgs = ((InternalEObject)onFailMaxAttemptAction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION, null, msgs);
      if (newOnFailMaxAttemptAction != null)
        msgs = ((InternalEObject)newOnFailMaxAttemptAction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION, null, msgs);
      msgs = basicSetOnFailMaxAttemptAction(newOnFailMaxAttemptAction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION, newOnFailMaxAttemptAction, newOnFailMaxAttemptAction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION:
        return basicSetOnFailMaxAttemptAction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArtemisPackage.MITD__DURATION:
        return getDuration();
      case ArtemisPackage.MITD__DEPENDS_ON:
        if (resolve) return getDependsOn();
        return basicGetDependsOn();
      case ArtemisPackage.MITD__MAX_ATTEMPTS:
        return getMaxAttempts();
      case ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION:
        return getOnFailMaxAttemptAction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArtemisPackage.MITD__DURATION:
        setDuration((Double)newValue);
        return;
      case ArtemisPackage.MITD__DEPENDS_ON:
        setDependsOn((Task)newValue);
        return;
      case ArtemisPackage.MITD__MAX_ATTEMPTS:
        setMaxAttempts((Integer)newValue);
        return;
      case ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION:
        setOnFailMaxAttemptAction((OnFailAction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArtemisPackage.MITD__DURATION:
        setDuration(DURATION_EDEFAULT);
        return;
      case ArtemisPackage.MITD__DEPENDS_ON:
        setDependsOn((Task)null);
        return;
      case ArtemisPackage.MITD__MAX_ATTEMPTS:
        setMaxAttempts(MAX_ATTEMPTS_EDEFAULT);
        return;
      case ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION:
        setOnFailMaxAttemptAction((OnFailAction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArtemisPackage.MITD__DURATION:
        return duration != DURATION_EDEFAULT;
      case ArtemisPackage.MITD__DEPENDS_ON:
        return dependsOn != null;
      case ArtemisPackage.MITD__MAX_ATTEMPTS:
        return maxAttempts != MAX_ATTEMPTS_EDEFAULT;
      case ArtemisPackage.MITD__ON_FAIL_MAX_ATTEMPT_ACTION:
        return onFailMaxAttemptAction != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (duration: ");
    result.append(duration);
    result.append(", maxAttempts: ");
    result.append(maxAttempts);
    result.append(')');
    return result.toString();
  }

} //MitdImpl
