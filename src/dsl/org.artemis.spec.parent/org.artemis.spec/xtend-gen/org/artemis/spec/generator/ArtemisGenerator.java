/**
 * generated by Xtext 2.25.0
 */
package org.artemis.spec.generator;

import java.util.Arrays;
import org.artemis.spec.artemis.ArtemisModel;
import org.artemis.spec.artemis.Collect;
import org.artemis.spec.artemis.MaxDuration;
import org.artemis.spec.artemis.MaxTries;
import org.artemis.spec.artemis.Mitd;
import org.artemis.spec.artemis.OnFailAction;
import org.artemis.spec.artemis.Period;
import org.artemis.spec.artemis.Property;
import org.artemis.spec.artemis.RestartPath;
import org.artemis.spec.artemis.RestartTask;
import org.artemis.spec.artemis.SkipPath;
import org.artemis.spec.artemis.SkipTask;
import org.artemis.spec.artemis.Task;
import org.artemis.spec.artemis.TaskProperties;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ArtemisGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    final ArtemisModel root = ((ArtemisModel) _head);
    String _lastSegment = resource.getURI().trimFileExtension().lastSegment();
    String _plus = (_lastSegment + ".machine");
    fsa.generateFile(_plus, this.artemis2SM(root));
  }

  public CharSequence artemis2SM(final ArtemisModel model) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<TaskProperties> _taskProperties = model.getTaskProperties();
      for(final TaskProperties taskProperties : _taskProperties) {
        {
          EList<Property> _properties = taskProperties.getProperties();
          for(final Property property : _properties) {
            CharSequence _property2Machine = this.property2Machine(property, taskProperties.getTask(), taskProperties.getProperties().indexOf(property));
            _builder.append(_property2Machine);
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }

  protected CharSequence _property2Machine(final Period periodProperty, final Task task, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("machine ");
    String _name = task.getName();
    _builder.append(_name);
    _builder.append("_");
    _builder.append(index);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("variables");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("real period = ");
    double _period = periodProperty.getPeriod();
    _builder.append(_period, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("real jitter = 20.0");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("real start");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int counter = 1");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int nrTries = 1");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initial state NotStarted {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_1 = task.getName();
    _builder.append(_name_1, "        ");
    _builder.append(", t)");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("start = t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: WaitTaskEnd");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("state WaitTaskEnd {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on endTask(");
    String _name_2 = task.getName();
    _builder.append(_name_2, "        ");
    _builder.append(", t) guard: t <= start + (counter * period) + jitter");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: WaitTaskStart");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on anyEvent(t) guard: (t >= start + (counter * period) + jitter) and (nrTries < ");
    int _maxAttempts = periodProperty.getMaxAttempts();
    _builder.append(_maxAttempts, "        ");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("counter = 1");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nrTries = nrTries + 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction = this.onFailAction(periodProperty.getOnFailAction());
    _builder.append(_onFailAction, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on anyEvent(t) guard: (t >= start + (counter * period) + jitter) and (nrTries == ");
    int _maxAttempts_1 = periodProperty.getMaxAttempts();
    _builder.append(_maxAttempts_1, "        ");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("counter = 1");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nrTries = 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction_1 = this.onFailAction(periodProperty.getOnFailMaxAttemptAction());
    _builder.append(_onFailAction_1, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted //or finish and discard the entire monitor?");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("state WaitTaskStart {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_3 = task.getName();
    _builder.append(_name_3, "        ");
    _builder.append(", t) guard: (t <= start + (counter * period) + jitter) and");
    _builder.newLineIfNotEmpty();
    _builder.append("                                  ");
    _builder.append("(t >= start + (counter * period) - jitter)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("counter = counter + 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: WaitTaskEnd");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on anyEvent(t) guard: (t >= start + (counter * period) + jitter) and nrTries < ");
    int _maxAttempts_2 = periodProperty.getMaxAttempts();
    _builder.append(_maxAttempts_2, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("counter = 1");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nrTries = nrTries + 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction_2 = this.onFailAction(periodProperty.getOnFailAction());
    _builder.append(_onFailAction_2, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on anyEvent(t) guard: (t >= start + (counter * period) + jitter) and nrTries == ");
    int _maxAttempts_3 = periodProperty.getMaxAttempts();
    _builder.append(_maxAttempts_3, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("counter = 1");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nrTries = 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction_3 = this.onFailAction(periodProperty.getOnFailMaxAttemptAction());
    _builder.append(_onFailAction_3, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_4 = task.getName();
    _builder.append(_name_4, "        ");
    _builder.append(", t) guard: (t < start + (counter * period) - jitter) and nrTries < ");
    int _maxAttempts_4 = periodProperty.getMaxAttempts();
    _builder.append(_maxAttempts_4, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("counter = 1");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nrTries = nrTries + 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction_4 = this.onFailAction(periodProperty.getOnFailAction());
    _builder.append(_onFailAction_4, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_5 = task.getName();
    _builder.append(_name_5, "        ");
    _builder.append(", t) guard: (t < start + (counter * period) - jitter) and nrTries == ");
    int _maxAttempts_5 = periodProperty.getMaxAttempts();
    _builder.append(_maxAttempts_5, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("counter = 1");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nrTries = 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction_5 = this.onFailAction(periodProperty.getOnFailMaxAttemptAction());
    _builder.append(_onFailAction_5, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _property2Machine(final MaxTries maxTriesProperty, final Task task, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("machine ");
    String _name = task.getName();
    _builder.append(_name);
    _builder.append("_");
    _builder.append(index);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("variables");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int maxTries = ");
    int _nrTries = maxTriesProperty.getNrTries();
    _builder.append(_nrTries, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("int i");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initial state NotStarted {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_1 = task.getName();
    _builder.append(_name_1, "        ");
    _builder.append(", t)");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: Started");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("state Started {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_2 = task.getName();
    _builder.append(_name_2, "        ");
    _builder.append(", t) guard: i < maxTries");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = i + 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: Started");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_3 = task.getName();
    _builder.append(_name_3, "        ");
    _builder.append(", t) guard: i == maxTries");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    CharSequence _onFailAction = this.onFailAction(maxTriesProperty.getOnFailAction());
    _builder.append(_onFailAction, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on endTask(");
    String _name_4 = task.getName();
    _builder.append(_name_4, "        ");
    _builder.append(", t)");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _property2Machine(final MaxDuration maxDurationProperty, final Task task, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("machine ");
    String _name = task.getName();
    _builder.append(_name);
    _builder.append("_");
    _builder.append(index);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("variables");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("real d = ");
    double _maxDuration = maxDurationProperty.getMaxDuration();
    _builder.append(_maxDuration, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("real start");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initial state NotStarted {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("on startTask(");
    String _name_1 = task.getName();
    _builder.append(_name_1, "            ");
    _builder.append(", t)");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("start = t");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("next state: Started");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("state Started {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("on endTask(");
    String _name_2 = task.getName();
    _builder.append(_name_2, "            ");
    _builder.append(", t) guard: t - start <= d");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("on anyEvent(t) guard: t - start > d");
    _builder.newLine();
    _builder.append("                ");
    CharSequence _onFailAction = this.onFailAction(maxDurationProperty.getOnFailAction());
    _builder.append(_onFailAction, "                ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("next state: NotStarted");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _property2Machine(final Collect collectProperty, final Task task, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("machine ");
    String _name = task.getName();
    _builder.append(_name);
    _builder.append("_");
    _builder.append(index);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("variables");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("int i = 0");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initial state Idle {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_1 = task.getName();
    _builder.append(_name_1, "        ");
    _builder.append(", t) guard: i == ");
    int _nrItems = collectProperty.getNrItems();
    _builder.append(_nrItems, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = 0");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: Idle");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_2 = task.getName();
    _builder.append(_name_2, "        ");
    _builder.append(", t) guard: i != ");
    int _nrItems_1 = collectProperty.getNrItems();
    _builder.append(_nrItems_1, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = 0");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction = this.onFailAction(collectProperty.getOnFailAction());
    _builder.append(_onFailAction, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: Idle");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on endTask(");
    String _name_3 = collectProperty.getDependsOn().getName();
    _builder.append(_name_3, "        ");
    _builder.append(", t)");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = i + 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: Idle");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _property2Machine(final Mitd mitdProperty, final Task task, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("machine ");
    String _name = task.getName();
    _builder.append(_name);
    _builder.append("_");
    _builder.append(index);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("variables");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("real d = ");
    double _duration = mitdProperty.getDuration();
    _builder.append(_duration, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("int i = 1");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("real end");
    String _name_1 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_1, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initial state WaitEnd");
    String _name_2 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_2, "    ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("on endTask(");
    String _name_3 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_3, "        ");
    _builder.append(", t)");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("end");
    String _name_4 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_4, "            ");
    _builder.append(" = t");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: WaitStart");
    String _name_5 = task.getName();
    _builder.append(_name_5, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("state WaitStart");
    String _name_6 = task.getName();
    _builder.append(_name_6, "    ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("on startTask(");
    String _name_7 = task.getName();
    _builder.append(_name_7, "        ");
    _builder.append(", t) guard: t - end");
    String _name_8 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_8, "        ");
    _builder.append(" <= d");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("next state: WaitEnd");
    String _name_9 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_9, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on anyEvent(t) guard: t - end");
    String _name_10 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_10, "        ");
    _builder.append(" > d and i < ");
    int _maxAttempts = mitdProperty.getMaxAttempts();
    _builder.append(_maxAttempts, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("i = i + 1");
    _builder.newLine();
    _builder.append("            ");
    CharSequence _onFailAction = this.onFailAction(mitdProperty.getOnFailAction());
    _builder.append(_onFailAction, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: WaitEnd");
    String _name_11 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_11, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("on anyEvent(t) guard: t - end");
    String _name_12 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_12, "        ");
    _builder.append(" > d and i == ");
    int _maxAttempts_1 = mitdProperty.getMaxAttempts();
    _builder.append(_maxAttempts_1, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    CharSequence _onFailAction_1 = this.onFailAction(mitdProperty.getOnFailMaxAttemptAction());
    _builder.append(_onFailAction_1, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("next state: WaitEnd");
    String _name_13 = mitdProperty.getDependsOn().getName();
    _builder.append(_name_13, "        ");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  protected CharSequence _onFailAction(final RestartPath rp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("restartPath");
    {
      int _path = rp.getPath();
      boolean _greaterThan = (_path > 0);
      if (_greaterThan) {
        _builder.append(" Path: ");
        int _path_1 = rp.getPath();
        _builder.append(_path_1);
      }
    }
    return _builder;
  }

  protected CharSequence _onFailAction(final SkipPath sp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("skipPath");
    {
      int _path = sp.getPath();
      boolean _greaterThan = (_path > 0);
      if (_greaterThan) {
        _builder.append(" Path: ");
        int _path_1 = sp.getPath();
        _builder.append(_path_1);
      }
    }
    return _builder;
  }

  protected CharSequence _onFailAction(final RestartTask rt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("restartTask");
    return _builder;
  }

  protected CharSequence _onFailAction(final SkipTask st) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("skipTask");
    return _builder;
  }

  public CharSequence property2Machine(final Property collectProperty, final Task task, final int index) {
    if (collectProperty instanceof Collect) {
      return _property2Machine((Collect)collectProperty, task, index);
    } else if (collectProperty instanceof MaxDuration) {
      return _property2Machine((MaxDuration)collectProperty, task, index);
    } else if (collectProperty instanceof MaxTries) {
      return _property2Machine((MaxTries)collectProperty, task, index);
    } else if (collectProperty instanceof Mitd) {
      return _property2Machine((Mitd)collectProperty, task, index);
    } else if (collectProperty instanceof Period) {
      return _property2Machine((Period)collectProperty, task, index);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(collectProperty, task, index).toString());
    }
  }

  public CharSequence onFailAction(final OnFailAction rp) {
    if (rp instanceof RestartPath) {
      return _onFailAction((RestartPath)rp);
    } else if (rp instanceof RestartTask) {
      return _onFailAction((RestartTask)rp);
    } else if (rp instanceof SkipPath) {
      return _onFailAction((SkipPath)rp);
    } else if (rp instanceof SkipTask) {
      return _onFailAction((SkipTask)rp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(rp).toString());
    }
  }
}
