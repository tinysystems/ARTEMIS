/*
 * generated by Xtext 2.25.0
 */
package org.artemis.sm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.artemis.base.services.BaseGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.Monitor");
		private final Assignment cMachinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMachinesStateMachineParserRuleCall_0 = (RuleCall)cMachinesAssignment.eContents().get(0);
		
		//Monitor:
		//    machines += StateMachine+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//machines += StateMachine+
		public Assignment getMachinesAssignment() { return cMachinesAssignment; }
		
		//StateMachine
		public RuleCall getMachinesStateMachineParserRuleCall_0() { return cMachinesStateMachineParserRuleCall_0; }
	}
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVariablesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarsTypedVariableParserRuleCall_3_1_0 = (RuleCall)cVarsAssignment_3_1.eContents().get(0);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StateMachine:
		//    'machine' name = ID '{'
		//        ('variables' vars += TypedVariable+)?
		//        states += State+
		//     '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name = ID '{'
		//    ('variables' vars += TypedVariable+)?
		//    states += State+
		// '}'
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('variables' vars += TypedVariable+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'variables'
		public Keyword getVariablesKeyword_3_0() { return cVariablesKeyword_3_0; }
		
		//vars += TypedVariable+
		public Assignment getVarsAssignment_3_1() { return cVarsAssignment_3_1; }
		
		//TypedVariable
		public RuleCall getVarsTypedVariableParserRuleCall_3_1_0() { return cVarsTypedVariableParserRuleCall_3_1_0; }
		
		//states += State+
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//    initial?= 'initial'? 'state' name = ID '{'
		//        (transitions += Transition)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//initial?= 'initial'? 'state' name = ID '{'
		//    (transitions += Transition)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//initial?= 'initial'?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(transitions += Transition)*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() { return cTransitionsTransitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGuardKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cOnFailAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOnFailOnFailActionParserRuleCall_4_0 = (RuleCall)cOnFailAssignment_4.eContents().get(0);
		private final Keyword cNextKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cStateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cNextStateCrossReference_7_0 = (CrossReference)cNextAssignment_7.eContents().get(0);
		private final RuleCall cNextStateIDTerminalRuleCall_7_0_1 = (RuleCall)cNextStateCrossReference_7_0.eContents().get(1);
		
		//Transition:
		//    'on' event = Event ('guard:' guard = Expression)?
		//        actions += Action*
		//        (onFail = OnFailAction)?
		//     'next' 'state:' next = [State | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' event = Event ('guard:' guard = Expression)?
		//    actions += Action*
		//    (onFail = OnFailAction)?
		// 'next' 'state:' next = [State | ID]
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//event = Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }
		
		//('guard:' guard = Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'guard:'
		public Keyword getGuardKeyword_2_0() { return cGuardKeyword_2_0; }
		
		//guard = Expression
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_1_0() { return cGuardExpressionParserRuleCall_2_1_0; }
		
		//actions += Action*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
		
		//(onFail = OnFailAction)?
		public Assignment getOnFailAssignment_4() { return cOnFailAssignment_4; }
		
		//OnFailAction
		public RuleCall getOnFailOnFailActionParserRuleCall_4_0() { return cOnFailOnFailActionParserRuleCall_4_0; }
		
		//'next'
		public Keyword getNextKeyword_5() { return cNextKeyword_5; }
		
		//'state:'
		public Keyword getStateKeyword_6() { return cStateKeyword_6; }
		
		//next = [State | ID]
		public Assignment getNextAssignment_7() { return cNextAssignment_7; }
		
		//[State | ID]
		public CrossReference getNextStateCrossReference_7_0() { return cNextStateCrossReference_7_0; }
		
		//ID
		public RuleCall getNextStateIDTerminalRuleCall_7_0_1() { return cNextStateIDTerminalRuleCall_7_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnyEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Event:
		//    StartTask | EndTask | AnyEvent
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StartTask | EndTask | AnyEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartTask
		public RuleCall getStartTaskParserRuleCall_0() { return cStartTaskParserRuleCall_0; }
		
		//EndTask
		public RuleCall getEndTaskParserRuleCall_1() { return cEndTaskParserRuleCall_1; }
		
		//AnyEvent
		public RuleCall getAnyEventParserRuleCall_2() { return cAnyEventParserRuleCall_2; }
	}
	public class StartTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.StartTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTaskIDTerminalRuleCall_2_0 = (RuleCall)cTaskAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeVarUntypedVariableParserRuleCall_4_0 = (RuleCall)cTimeVarAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StartTask:
		//    'startTask' '(' task = ID ',' timeVar = UntypedVariable ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'startTask' '(' task = ID ',' timeVar = UntypedVariable ')'
		public Group getGroup() { return cGroup; }
		
		//'startTask'
		public Keyword getStartTaskKeyword_0() { return cStartTaskKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//task = ID
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }
		
		//ID
		public RuleCall getTaskIDTerminalRuleCall_2_0() { return cTaskIDTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//timeVar = UntypedVariable
		public Assignment getTimeVarAssignment_4() { return cTimeVarAssignment_4; }
		
		//UntypedVariable
		public RuleCall getTimeVarUntypedVariableParserRuleCall_4_0() { return cTimeVarUntypedVariableParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EndTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.EndTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTaskIDTerminalRuleCall_2_0 = (RuleCall)cTaskAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeVarUntypedVariableParserRuleCall_4_0 = (RuleCall)cTimeVarAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EndTask:
		//    'endTask' '(' task = ID ',' timeVar = UntypedVariable ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'endTask' '(' task = ID ',' timeVar = UntypedVariable ')'
		public Group getGroup() { return cGroup; }
		
		//'endTask'
		public Keyword getEndTaskKeyword_0() { return cEndTaskKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//task = ID
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }
		
		//ID
		public RuleCall getTaskIDTerminalRuleCall_2_0() { return cTaskIDTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//timeVar = UntypedVariable
		public Assignment getTimeVarAssignment_4() { return cTimeVarAssignment_4; }
		
		//UntypedVariable
		public RuleCall getTimeVarUntypedVariableParserRuleCall_4_0() { return cTimeVarUntypedVariableParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AnyEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.AnyEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnyEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeVarUntypedVariableParserRuleCall_2_0 = (RuleCall)cTimeVarAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AnyEvent:
		//    'anyEvent' '(' timeVar = UntypedVariable ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'anyEvent' '(' timeVar = UntypedVariable ')'
		public Group getGroup() { return cGroup; }
		
		//'anyEvent'
		public Keyword getAnyEventKeyword_0() { return cAnyEventKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//timeVar = UntypedVariable
		public Assignment getTimeVarAssignment_2() { return cTimeVarAssignment_2; }
		
		//UntypedVariable
		public RuleCall getTimeVarUntypedVariableParserRuleCall_2_0() { return cTimeVarUntypedVariableParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUntypedVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//    TypedVariable | UntypedVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TypedVariable | UntypedVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedVariable
		public RuleCall getTypedVariableParserRuleCall_0() { return cTypedVariableParserRuleCall_0; }
		
		//UntypedVariable
		public RuleCall getUntypedVariableParserRuleCall_1() { return cUntypedVariableParserRuleCall_1; }
	}
	public class UntypedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.UntypedVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UntypedVariable:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TypedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.TypedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//TypedVariable:
		//    type = Type name = ID ('=' expr = Expression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = Type name = ID ('=' expr = Expression)?
		public Group getGroup() { return cGroup; }
		
		//type = Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' expr = Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expr = Expression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_1_0() { return cExprExpressionParserRuleCall_2_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.Action");
		private final RuleCall cAssignmentActionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Action:
		//    AssignmentAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentAction
		public RuleCall getAssignmentActionParserRuleCall() { return cAssignmentActionParserRuleCall; }
	}
	public class AssignmentActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.AssignmentAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarVariableCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVarVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AssignmentAction:
		//    var = [Variable | ID] '=' expr = Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [Variable | ID] '=' expr = Expression
		public Group getGroup() { return cGroup; }
		
		//var = [Variable | ID]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[Variable | ID]
		public CrossReference getVarVariableCrossReference_0_0() { return cVarVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_0_0_1() { return cVarVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expr = Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}
	public class OnFailActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.OnFailAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRestartPathParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSkipPathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRestartTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSkipTaskParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OnFailAction:
		//    RestartPath | SkipPath | RestartTask | SkipTask
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RestartPath | SkipPath | RestartTask | SkipTask
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RestartPath
		public RuleCall getRestartPathParserRuleCall_0() { return cRestartPathParserRuleCall_0; }
		
		//SkipPath
		public RuleCall getSkipPathParserRuleCall_1() { return cSkipPathParserRuleCall_1; }
		
		//RestartTask
		public RuleCall getRestartTaskParserRuleCall_2() { return cRestartTaskParserRuleCall_2; }
		
		//SkipTask
		public RuleCall getSkipTaskParserRuleCall_3() { return cSkipTaskParserRuleCall_3; }
	}
	public class RestartPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.RestartPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestartPathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRestartPathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPathKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPathAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathINTTerminalRuleCall_2_1_0 = (RuleCall)cPathAssignment_2_1.eContents().get(0);
		
		//RestartPath: {RestartPath}
		//    'restartPath' ('Path:' path = INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RestartPath}
		//   'restartPath' ('Path:' path = INT)?
		public Group getGroup() { return cGroup; }
		
		//{RestartPath}
		public Action getRestartPathAction_0() { return cRestartPathAction_0; }
		
		//'restartPath'
		public Keyword getRestartPathKeyword_1() { return cRestartPathKeyword_1; }
		
		//('Path:' path = INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Path:'
		public Keyword getPathKeyword_2_0() { return cPathKeyword_2_0; }
		
		//path = INT
		public Assignment getPathAssignment_2_1() { return cPathAssignment_2_1; }
		
		//INT
		public RuleCall getPathINTTerminalRuleCall_2_1_0() { return cPathINTTerminalRuleCall_2_1_0; }
	}
	public class SkipPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.SkipPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipPathAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipPathKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPathKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPathAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathINTTerminalRuleCall_2_1_0 = (RuleCall)cPathAssignment_2_1.eContents().get(0);
		
		//SkipPath: {SkipPath}
		//    'skipPath' ('Path:' path = INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SkipPath}
		//   'skipPath' ('Path:' path = INT)?
		public Group getGroup() { return cGroup; }
		
		//{SkipPath}
		public Action getSkipPathAction_0() { return cSkipPathAction_0; }
		
		//'skipPath'
		public Keyword getSkipPathKeyword_1() { return cSkipPathKeyword_1; }
		
		//('Path:' path = INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Path:'
		public Keyword getPathKeyword_2_0() { return cPathKeyword_2_0; }
		
		//path = INT
		public Assignment getPathAssignment_2_1() { return cPathAssignment_2_1; }
		
		//INT
		public RuleCall getPathINTTerminalRuleCall_2_1_0() { return cPathINTTerminalRuleCall_2_1_0; }
	}
	public class RestartTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.RestartTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestartTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRestartTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RestartTask: {RestartTask}
		//    'restartTask'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RestartTask}
		//   'restartTask'
		public Group getGroup() { return cGroup; }
		
		//{RestartTask}
		public Action getRestartTaskAction_0() { return cRestartTaskAction_0; }
		
		//'restartTask'
		public Keyword getRestartTaskKeyword_1() { return cRestartTaskKeyword_1; }
	}
	public class SkipTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.SkipTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SkipTask: {SkipTask}
		//    'skipTask'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SkipTask}
		//   'skipTask'
		public Group getGroup() { return cGroup; }
		
		//{SkipTask}
		public Action getSkipTaskAction_0() { return cSkipTaskAction_0; }
		
		//'skipTask'
		public Keyword getSkipTaskKeyword_1() { return cSkipTaskKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.Expression");
		private final RuleCall cExpressionLevel1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression: ExpressionLevel1;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionLevel1
		public RuleCall getExpressionLevel1ParserRuleCall() { return cExpressionLevel1ParserRuleCall; }
	}
	public class ExpressionLevel1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cANDKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionOrLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel2ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel1 returns Expression:        // Left associativity
		//    ExpressionLevel2
		//    ( ({ExpressionAnd.left=current}         ("AND" | "and") right=ExpressionLevel2)
		//    | ({ExpressionOr.left=current}          ("OR" | "or")   right=ExpressionLevel2)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel2
		//( ({ExpressionAnd.left=current}         ("AND" | "and") right=ExpressionLevel2)
		//| ({ExpressionOr.left=current}          ("OR" | "or")   right=ExpressionLevel2)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel2
		public RuleCall getExpressionLevel2ParserRuleCall_0() { return cExpressionLevel2ParserRuleCall_0; }
		
		//( ({ExpressionAnd.left=current}         ("AND" | "and") right=ExpressionLevel2)
		//| ({ExpressionOr.left=current}          ("OR" | "or")   right=ExpressionLevel2)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionAnd.left=current}         ("AND" | "and") right=ExpressionLevel2)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAnd.left=current}
		public Action getExpressionAndLeftAction_1_0_0() { return cExpressionAndLeftAction_1_0_0; }
		
		//("AND" | "and")
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//"AND"
		public Keyword getANDKeyword_1_0_1_0() { return cANDKeyword_1_0_1_0; }
		
		//"and"
		public Keyword getAndKeyword_1_0_1_1() { return cAndKeyword_1_0_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_0_2_0() { return cRightExpressionLevel2ParserRuleCall_1_0_2_0; }
		
		//({ExpressionOr.left=current}          ("OR" | "or")   right=ExpressionLevel2)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionOr.left=current}
		public Action getExpressionOrLeftAction_1_1_0() { return cExpressionOrLeftAction_1_1_0; }
		
		//("OR" | "or")
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//"OR"
		public Keyword getORKeyword_1_1_1_0() { return cORKeyword_1_1_1_0; }
		
		//"or"
		public Keyword getOrKeyword_1_1_1_1() { return cOrKeyword_1_1_1_1; }
		
		//right=ExpressionLevel2
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel2
		public RuleCall getRightExpressionLevel2ParserRuleCall_1_1_2_0() { return cRightExpressionLevel2ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionEqualLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionNEqualLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel3ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel2 returns Expression:        // Left associativity
		//    ExpressionLevel3
		//    ( ({ExpressionEqual.left=current}       "=="    right=ExpressionLevel3)
		//    | ({ExpressionNEqual.left=current}      "!="    right=ExpressionLevel3)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel3
		//( ({ExpressionEqual.left=current}       "=="    right=ExpressionLevel3)
		//| ({ExpressionNEqual.left=current}      "!="    right=ExpressionLevel3)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel3
		public RuleCall getExpressionLevel3ParserRuleCall_0() { return cExpressionLevel3ParserRuleCall_0; }
		
		//( ({ExpressionEqual.left=current}       "=="    right=ExpressionLevel3)
		//| ({ExpressionNEqual.left=current}      "!="    right=ExpressionLevel3)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionEqual.left=current}       "=="    right=ExpressionLevel3)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionEqual.left=current}
		public Action getExpressionEqualLeftAction_1_0_0() { return cExpressionEqualLeftAction_1_0_0; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1() { return cEqualsSignEqualsSignKeyword_1_0_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_0_2_0() { return cRightExpressionLevel3ParserRuleCall_1_0_2_0; }
		
		//({ExpressionNEqual.left=current}      "!="    right=ExpressionLevel3)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionNEqual.left=current}
		public Action getExpressionNEqualLeftAction_1_1_0() { return cExpressionNEqualLeftAction_1_1_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_1() { return cExclamationMarkEqualsSignKeyword_1_1_1; }
		
		//right=ExpressionLevel3
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel3
		public RuleCall getRightExpressionLevel3ParserRuleCall_1_1_2_0() { return cRightExpressionLevel3ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionGeqLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionGreaterLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionLeqLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionLessLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel4ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//ExpressionLevel3 returns Expression:        // Left associativity
		//    ExpressionLevel4
		//    ( ({ExpressionGeq.left    =current}     ">="    right=ExpressionLevel4)
		//    | ({ExpressionGreater.left=current}     ">"     right=ExpressionLevel4)
		//    | ({ExpressionLeq.left    =current}     "<="    right=ExpressionLevel4)
		//    | ({ExpressionLess.left   =current}     "<"     right=ExpressionLevel4)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel4
		//( ({ExpressionGeq.left    =current}     ">="    right=ExpressionLevel4)
		//| ({ExpressionGreater.left=current}     ">"     right=ExpressionLevel4)
		//| ({ExpressionLeq.left    =current}     "<="    right=ExpressionLevel4)
		//| ({ExpressionLess.left   =current}     "<"     right=ExpressionLevel4)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel4
		public RuleCall getExpressionLevel4ParserRuleCall_0() { return cExpressionLevel4ParserRuleCall_0; }
		
		//( ({ExpressionGeq.left    =current}     ">="    right=ExpressionLevel4)
		//| ({ExpressionGreater.left=current}     ">"     right=ExpressionLevel4)
		//| ({ExpressionLeq.left    =current}     "<="    right=ExpressionLevel4)
		//| ({ExpressionLess.left   =current}     "<"     right=ExpressionLevel4)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionGeq.left    =current}     ">="    right=ExpressionLevel4)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionGeq.left    =current}
		public Action getExpressionGeqLeftAction_1_0_0() { return cExpressionGeqLeftAction_1_0_0; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_1() { return cGreaterThanSignEqualsSignKeyword_1_0_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_0_2_0() { return cRightExpressionLevel4ParserRuleCall_1_0_2_0; }
		
		//({ExpressionGreater.left=current}     ">"     right=ExpressionLevel4)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionGreater.left=current}
		public Action getExpressionGreaterLeftAction_1_1_0() { return cExpressionGreaterLeftAction_1_1_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_1_1_1() { return cGreaterThanSignKeyword_1_1_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_1_2_0() { return cRightExpressionLevel4ParserRuleCall_1_1_2_0; }
		
		//({ExpressionLeq.left    =current}     "<="    right=ExpressionLevel4)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionLeq.left    =current}
		public Action getExpressionLeqLeftAction_1_2_0() { return cExpressionLeqLeftAction_1_2_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_2_1() { return cLessThanSignEqualsSignKeyword_1_2_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_2_2_0() { return cRightExpressionLevel4ParserRuleCall_1_2_2_0; }
		
		//({ExpressionLess.left   =current}     "<"     right=ExpressionLevel4)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionLess.left   =current}
		public Action getExpressionLessLeftAction_1_3_0() { return cExpressionLessLeftAction_1_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1_3_1() { return cLessThanSignKeyword_1_3_1; }
		
		//right=ExpressionLevel4
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel4
		public RuleCall getRightExpressionLevel4ParserRuleCall_1_3_2_0() { return cRightExpressionLevel4ParserRuleCall_1_3_2_0; }
	}
	public class ExpressionLevel4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionAdditionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel5ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionSubtractionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel5ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ExpressionLevel4 returns Expression:        // Left associativity
		//    ExpressionLevel5
		//    ( ({ExpressionAddition.left   =current} "+"     right=ExpressionLevel5)
		//    | ({ExpressionSubtraction.left=current} "-"     right=ExpressionLevel5)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel5
		//( ({ExpressionAddition.left   =current} "+"     right=ExpressionLevel5)
		//| ({ExpressionSubtraction.left=current} "-"     right=ExpressionLevel5)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel5
		public RuleCall getExpressionLevel5ParserRuleCall_0() { return cExpressionLevel5ParserRuleCall_0; }
		
		//( ({ExpressionAddition.left   =current} "+"     right=ExpressionLevel5)
		//| ({ExpressionSubtraction.left=current} "-"     right=ExpressionLevel5)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionAddition.left   =current} "+"     right=ExpressionLevel5)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionAddition.left   =current}
		public Action getExpressionAdditionLeftAction_1_0_0() { return cExpressionAdditionLeftAction_1_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }
		
		//right=ExpressionLevel5
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel5
		public RuleCall getRightExpressionLevel5ParserRuleCall_1_0_2_0() { return cRightExpressionLevel5ParserRuleCall_1_0_2_0; }
		
		//({ExpressionSubtraction.left=current} "-"     right=ExpressionLevel5)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionSubtraction.left=current}
		public Action getExpressionSubtractionLeftAction_1_1_0() { return cExpressionSubtractionLeftAction_1_1_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }
		
		//right=ExpressionLevel5
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel5
		public RuleCall getRightExpressionLevel5ParserRuleCall_1_1_2_0() { return cRightExpressionLevel5ParserRuleCall_1_1_2_0; }
	}
	public class ExpressionLevel5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cExpressionMultiplyLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpressionDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cExpressionMaximumLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cMaxKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cExpressionMinimumLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cMinKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		
		//ExpressionLevel5 returns Expression:        // Left associativity
		//    ExpressionLevel6
		//    ( ({ExpressionMultiply.left=current}    "*"     right=ExpressionLevel6)
		//    | ({ExpressionDivision.left=current}    "/"     right=ExpressionLevel6)
		//    | ({ExpressionMaximum.left =current}    "max"   right=ExpressionLevel6)
		//    | ({ExpressionMinimum.left =current}    "min"   right=ExpressionLevel6)
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Left associativity
		//ExpressionLevel6
		//( ({ExpressionMultiply.left=current}    "*"     right=ExpressionLevel6)
		//| ({ExpressionDivision.left=current}    "/"     right=ExpressionLevel6)
		//| ({ExpressionMaximum.left =current}    "max"   right=ExpressionLevel6)
		//| ({ExpressionMinimum.left =current}    "min"   right=ExpressionLevel6)
		//)*
		public Group getGroup() { return cGroup; }
		
		//    // Left associativity
		//ExpressionLevel6
		public RuleCall getExpressionLevel6ParserRuleCall_0() { return cExpressionLevel6ParserRuleCall_0; }
		
		//( ({ExpressionMultiply.left=current}    "*"     right=ExpressionLevel6)
		//| ({ExpressionDivision.left=current}    "/"     right=ExpressionLevel6)
		//| ({ExpressionMaximum.left =current}    "max"   right=ExpressionLevel6)
		//| ({ExpressionMinimum.left =current}    "min"   right=ExpressionLevel6)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//({ExpressionMultiply.left=current}    "*"     right=ExpressionLevel6)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExpressionMultiply.left=current}
		public Action getExpressionMultiplyLeftAction_1_0_0() { return cExpressionMultiplyLeftAction_1_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_0_2_0() { return cRightExpressionLevel6ParserRuleCall_1_0_2_0; }
		
		//({ExpressionDivision.left=current}    "/"     right=ExpressionLevel6)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ExpressionDivision.left=current}
		public Action getExpressionDivisionLeftAction_1_1_0() { return cExpressionDivisionLeftAction_1_1_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_1_2_0() { return cRightExpressionLevel6ParserRuleCall_1_1_2_0; }
		
		//({ExpressionMaximum.left =current}    "max"   right=ExpressionLevel6)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ExpressionMaximum.left =current}
		public Action getExpressionMaximumLeftAction_1_2_0() { return cExpressionMaximumLeftAction_1_2_0; }
		
		//"max"
		public Keyword getMaxKeyword_1_2_1() { return cMaxKeyword_1_2_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_2_2_0() { return cRightExpressionLevel6ParserRuleCall_1_2_2_0; }
		
		//({ExpressionMinimum.left =current}    "min"   right=ExpressionLevel6)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{ExpressionMinimum.left =current}
		public Action getExpressionMinimumLeftAction_1_3_0() { return cExpressionMinimumLeftAction_1_3_0; }
		
		//"min"
		public Keyword getMinKeyword_1_3_1() { return cMinKeyword_1_3_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_3_2_0() { return cRightExpressionLevel6ParserRuleCall_1_3_2_0; }
	}
	public class ExpressionLevel6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionLevel7ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionPowerLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLevel6ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExpressionLevel6 returns Expression:        // Right associativity
		//    ExpressionLevel7
		//    ( ({ExpressionPower.left=current}       "^"     right=ExpressionLevel6)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // Right associativity
		//ExpressionLevel7
		//( ({ExpressionPower.left=current}       "^"     right=ExpressionLevel6)
		//)?
		public Group getGroup() { return cGroup; }
		
		//    // Right associativity
		//ExpressionLevel7
		public RuleCall getExpressionLevel7ParserRuleCall_0() { return cExpressionLevel7ParserRuleCall_0; }
		
		//( ({ExpressionPower.left=current}       "^"     right=ExpressionLevel6)
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExpressionPower.left=current}
		public Action getExpressionPowerLeftAction_1_0() { return cExpressionPowerLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=ExpressionLevel6
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ExpressionLevel6
		public RuleCall getRightExpressionLevel6ParserRuleCall_1_2_0() { return cRightExpressionLevel6ParserRuleCall_1_2_0; }
	}
	public class ExpressionLevel7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel7");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionPlusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionLevel8ParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ExpressionLevel7 returns Expression:
		//    ExpressionNot | ExpressionMinus | ExpressionPlus | ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionNot | ExpressionMinus | ExpressionPlus | ExpressionLevel8
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionNot
		public RuleCall getExpressionNotParserRuleCall_0() { return cExpressionNotParserRuleCall_0; }
		
		//ExpressionMinus
		public RuleCall getExpressionMinusParserRuleCall_1() { return cExpressionMinusParserRuleCall_1; }
		
		//ExpressionPlus
		public RuleCall getExpressionPlusParserRuleCall_2() { return cExpressionPlusParserRuleCall_2; }
		
		//ExpressionLevel8
		public RuleCall getExpressionLevel8ParserRuleCall_3() { return cExpressionLevel8ParserRuleCall_3; }
	}
	public class ExpressionNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionNot:
		//    ("NOT" | "not") sub=ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("NOT" | "not") sub=ExpressionLevel8
		public Group getGroup() { return cGroup; }
		
		//("NOT" | "not")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"NOT"
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//sub=ExpressionLevel8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel8
		public RuleCall getSubExpressionLevel8ParserRuleCall_1_0() { return cSubExpressionLevel8ParserRuleCall_1_0; }
	}
	public class ExpressionMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionMinus:
		//    "-" sub=ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"-" sub=ExpressionLevel8
		public Group getGroup() { return cGroup; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//sub=ExpressionLevel8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel8
		public RuleCall getSubExpressionLevel8ParserRuleCall_1_0() { return cSubExpressionLevel8ParserRuleCall_1_0; }
	}
	public class ExpressionPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionLevel8ParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		
		//ExpressionPlus:
		//    "+" sub=ExpressionLevel8
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"+" sub=ExpressionLevel8
		public Group getGroup() { return cGroup; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//sub=ExpressionLevel8
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//ExpressionLevel8
		public RuleCall getSubExpressionLevel8ParserRuleCall_1_0() { return cSubExpressionLevel8ParserRuleCall_1_0; }
	}
	public class ExpressionLevel8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionLevel8");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionConstantBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionConstantIntParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionConstantRealParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpressionConstantStringParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionVariableParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ExpressionLevel8:
		//    ExpressionBracket |
		//    ExpressionConstantBool |
		//    ExpressionConstantInt |
		//    ExpressionConstantReal |
		//    ExpressionConstantString |
		//    ExpressionVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket |
		//ExpressionConstantBool |
		//ExpressionConstantInt |
		//ExpressionConstantReal |
		//ExpressionConstantString |
		//ExpressionVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//ExpressionConstantBool
		public RuleCall getExpressionConstantBoolParserRuleCall_1() { return cExpressionConstantBoolParserRuleCall_1; }
		
		//ExpressionConstantInt
		public RuleCall getExpressionConstantIntParserRuleCall_2() { return cExpressionConstantIntParserRuleCall_2; }
		
		//ExpressionConstantReal
		public RuleCall getExpressionConstantRealParserRuleCall_3() { return cExpressionConstantRealParserRuleCall_3; }
		
		//ExpressionConstantString
		public RuleCall getExpressionConstantStringParserRuleCall_4() { return cExpressionConstantStringParserRuleCall_4; }
		
		//ExpressionVariable
		public RuleCall getExpressionVariableParserRuleCall_5() { return cExpressionVariableParserRuleCall_5; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExpressionParserRuleCall_1_0 = (RuleCall)cSubAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//    "(" sub=Expression ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" sub=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//sub=Expression
		public Assignment getSubAssignment_1() { return cSubAssignment_1; }
		
		//Expression
		public RuleCall getSubExpressionParserRuleCall_1_0() { return cSubExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionConstantBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionConstantBool");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOL_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantBool:
		//    value=BOOL_LITERAL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL_LITERAL
		public RuleCall getValueBOOL_LITERALTerminalRuleCall_0() { return cValueBOOL_LITERALTerminalRuleCall_0; }
	}
	public class ExpressionConstantIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionConstantInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantInt:
		//    value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ExpressionConstantRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionConstantReal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantReal:
		//    value=FLOAT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class ExpressionConstantStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionConstantString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ExpressionConstantString:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ExpressionVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.ExpressionVariable");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//ExpressionVariable:
		//    variable=[Variable | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable | ID]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable | ID]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}
	
	
	private final MonitorElements pMonitor;
	private final StateMachineElements pStateMachine;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final EventElements pEvent;
	private final StartTaskElements pStartTask;
	private final EndTaskElements pEndTask;
	private final AnyEventElements pAnyEvent;
	private final VariableElements pVariable;
	private final UntypedVariableElements pUntypedVariable;
	private final TypedVariableElements pTypedVariable;
	private final ActionElements pAction;
	private final AssignmentActionElements pAssignmentAction;
	private final OnFailActionElements pOnFailAction;
	private final RestartPathElements pRestartPath;
	private final SkipPathElements pSkipPath;
	private final RestartTaskElements pRestartTask;
	private final SkipTaskElements pSkipTask;
	private final ExpressionElements pExpression;
	private final ExpressionLevel1Elements pExpressionLevel1;
	private final ExpressionLevel2Elements pExpressionLevel2;
	private final ExpressionLevel3Elements pExpressionLevel3;
	private final ExpressionLevel4Elements pExpressionLevel4;
	private final ExpressionLevel5Elements pExpressionLevel5;
	private final ExpressionLevel6Elements pExpressionLevel6;
	private final ExpressionLevel7Elements pExpressionLevel7;
	private final ExpressionNotElements pExpressionNot;
	private final ExpressionMinusElements pExpressionMinus;
	private final ExpressionPlusElements pExpressionPlus;
	private final ExpressionLevel8Elements pExpressionLevel8;
	private final ExpressionBracketElements pExpressionBracket;
	private final ExpressionConstantBoolElements pExpressionConstantBool;
	private final ExpressionConstantIntElements pExpressionConstantInt;
	private final ExpressionConstantRealElements pExpressionConstantReal;
	private final ExpressionConstantStringElements pExpressionConstantString;
	private final ExpressionVariableElements pExpressionVariable;
	private final TerminalRule tBOOL_LITERAL;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;
	
	private final BaseGrammarAccess gaBase;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineGrammarAccess(GrammarProvider grammarProvider,
			BaseGrammarAccess gaBase,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaBase = gaBase;
		this.gaTerminals = gaTerminals;
		this.pMonitor = new MonitorElements();
		this.pStateMachine = new StateMachineElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pEvent = new EventElements();
		this.pStartTask = new StartTaskElements();
		this.pEndTask = new EndTaskElements();
		this.pAnyEvent = new AnyEventElements();
		this.pVariable = new VariableElements();
		this.pUntypedVariable = new UntypedVariableElements();
		this.pTypedVariable = new TypedVariableElements();
		this.pAction = new ActionElements();
		this.pAssignmentAction = new AssignmentActionElements();
		this.pOnFailAction = new OnFailActionElements();
		this.pRestartPath = new RestartPathElements();
		this.pSkipPath = new SkipPathElements();
		this.pRestartTask = new RestartTaskElements();
		this.pSkipTask = new SkipTaskElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionLevel1 = new ExpressionLevel1Elements();
		this.pExpressionLevel2 = new ExpressionLevel2Elements();
		this.pExpressionLevel3 = new ExpressionLevel3Elements();
		this.pExpressionLevel4 = new ExpressionLevel4Elements();
		this.pExpressionLevel5 = new ExpressionLevel5Elements();
		this.pExpressionLevel6 = new ExpressionLevel6Elements();
		this.pExpressionLevel7 = new ExpressionLevel7Elements();
		this.pExpressionNot = new ExpressionNotElements();
		this.pExpressionMinus = new ExpressionMinusElements();
		this.pExpressionPlus = new ExpressionPlusElements();
		this.pExpressionLevel8 = new ExpressionLevel8Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pExpressionConstantBool = new ExpressionConstantBoolElements();
		this.pExpressionConstantInt = new ExpressionConstantIntElements();
		this.pExpressionConstantReal = new ExpressionConstantRealElements();
		this.pExpressionConstantString = new ExpressionConstantStringElements();
		this.pExpressionVariable = new ExpressionVariableElements();
		this.tBOOL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.BOOL_LITERAL");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.artemis.sm.StateMachine.FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.artemis.sm.StateMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Monitor:
	//    machines += StateMachine+
	//;
	public MonitorElements getMonitorAccess() {
		return pMonitor;
	}
	
	public ParserRule getMonitorRule() {
		return getMonitorAccess().getRule();
	}
	
	//StateMachine:
	//    'machine' name = ID '{'
	//        ('variables' vars += TypedVariable+)?
	//        states += State+
	//     '}'
	//;
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//State:
	//    initial?= 'initial'? 'state' name = ID '{'
	//        (transitions += Transition)*
	//    '}'
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//    'on' event = Event ('guard:' guard = Expression)?
	//        actions += Action*
	//        (onFail = OnFailAction)?
	//     'next' 'state:' next = [State | ID]
	//;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Event:
	//    StartTask | EndTask | AnyEvent
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//StartTask:
	//    'startTask' '(' task = ID ',' timeVar = UntypedVariable ')'
	//;
	public StartTaskElements getStartTaskAccess() {
		return pStartTask;
	}
	
	public ParserRule getStartTaskRule() {
		return getStartTaskAccess().getRule();
	}
	
	//EndTask:
	//    'endTask' '(' task = ID ',' timeVar = UntypedVariable ')'
	//;
	public EndTaskElements getEndTaskAccess() {
		return pEndTask;
	}
	
	public ParserRule getEndTaskRule() {
		return getEndTaskAccess().getRule();
	}
	
	//AnyEvent:
	//    'anyEvent' '(' timeVar = UntypedVariable ')'
	//;
	public AnyEventElements getAnyEventAccess() {
		return pAnyEvent;
	}
	
	public ParserRule getAnyEventRule() {
		return getAnyEventAccess().getRule();
	}
	
	//Variable:
	//    TypedVariable | UntypedVariable
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//UntypedVariable:
	//    name = ID
	//;
	public UntypedVariableElements getUntypedVariableAccess() {
		return pUntypedVariable;
	}
	
	public ParserRule getUntypedVariableRule() {
		return getUntypedVariableAccess().getRule();
	}
	
	//TypedVariable:
	//    type = Type name = ID ('=' expr = Expression)?
	//;
	public TypedVariableElements getTypedVariableAccess() {
		return pTypedVariable;
	}
	
	public ParserRule getTypedVariableRule() {
		return getTypedVariableAccess().getRule();
	}
	
	//Action:
	//    AssignmentAction
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//AssignmentAction:
	//    var = [Variable | ID] '=' expr = Expression
	//;
	public AssignmentActionElements getAssignmentActionAccess() {
		return pAssignmentAction;
	}
	
	public ParserRule getAssignmentActionRule() {
		return getAssignmentActionAccess().getRule();
	}
	
	//OnFailAction:
	//    RestartPath | SkipPath | RestartTask | SkipTask
	//;
	public OnFailActionElements getOnFailActionAccess() {
		return pOnFailAction;
	}
	
	public ParserRule getOnFailActionRule() {
		return getOnFailActionAccess().getRule();
	}
	
	//RestartPath: {RestartPath}
	//    'restartPath' ('Path:' path = INT)?
	//;
	public RestartPathElements getRestartPathAccess() {
		return pRestartPath;
	}
	
	public ParserRule getRestartPathRule() {
		return getRestartPathAccess().getRule();
	}
	
	//SkipPath: {SkipPath}
	//    'skipPath' ('Path:' path = INT)?
	//;
	public SkipPathElements getSkipPathAccess() {
		return pSkipPath;
	}
	
	public ParserRule getSkipPathRule() {
		return getSkipPathAccess().getRule();
	}
	
	//RestartTask: {RestartTask}
	//    'restartTask'
	//;
	public RestartTaskElements getRestartTaskAccess() {
		return pRestartTask;
	}
	
	public ParserRule getRestartTaskRule() {
		return getRestartTaskAccess().getRule();
	}
	
	//SkipTask: {SkipTask}
	//    'skipTask'
	//;
	public SkipTaskElements getSkipTaskAccess() {
		return pSkipTask;
	}
	
	public ParserRule getSkipTaskRule() {
		return getSkipTaskAccess().getRule();
	}
	
	//Expression: ExpressionLevel1;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExpressionLevel1 returns Expression:        // Left associativity
	//    ExpressionLevel2
	//    ( ({ExpressionAnd.left=current}         ("AND" | "and") right=ExpressionLevel2)
	//    | ({ExpressionOr.left=current}          ("OR" | "or")   right=ExpressionLevel2)
	//    )*
	//;
	public ExpressionLevel1Elements getExpressionLevel1Access() {
		return pExpressionLevel1;
	}
	
	public ParserRule getExpressionLevel1Rule() {
		return getExpressionLevel1Access().getRule();
	}
	
	//ExpressionLevel2 returns Expression:        // Left associativity
	//    ExpressionLevel3
	//    ( ({ExpressionEqual.left=current}       "=="    right=ExpressionLevel3)
	//    | ({ExpressionNEqual.left=current}      "!="    right=ExpressionLevel3)
	//    )*
	//;
	public ExpressionLevel2Elements getExpressionLevel2Access() {
		return pExpressionLevel2;
	}
	
	public ParserRule getExpressionLevel2Rule() {
		return getExpressionLevel2Access().getRule();
	}
	
	//ExpressionLevel3 returns Expression:        // Left associativity
	//    ExpressionLevel4
	//    ( ({ExpressionGeq.left    =current}     ">="    right=ExpressionLevel4)
	//    | ({ExpressionGreater.left=current}     ">"     right=ExpressionLevel4)
	//    | ({ExpressionLeq.left    =current}     "<="    right=ExpressionLevel4)
	//    | ({ExpressionLess.left   =current}     "<"     right=ExpressionLevel4)
	//    )*
	//;
	public ExpressionLevel3Elements getExpressionLevel3Access() {
		return pExpressionLevel3;
	}
	
	public ParserRule getExpressionLevel3Rule() {
		return getExpressionLevel3Access().getRule();
	}
	
	//ExpressionLevel4 returns Expression:        // Left associativity
	//    ExpressionLevel5
	//    ( ({ExpressionAddition.left   =current} "+"     right=ExpressionLevel5)
	//    | ({ExpressionSubtraction.left=current} "-"     right=ExpressionLevel5)
	//    )*
	//;
	public ExpressionLevel4Elements getExpressionLevel4Access() {
		return pExpressionLevel4;
	}
	
	public ParserRule getExpressionLevel4Rule() {
		return getExpressionLevel4Access().getRule();
	}
	
	//ExpressionLevel5 returns Expression:        // Left associativity
	//    ExpressionLevel6
	//    ( ({ExpressionMultiply.left=current}    "*"     right=ExpressionLevel6)
	//    | ({ExpressionDivision.left=current}    "/"     right=ExpressionLevel6)
	//    | ({ExpressionMaximum.left =current}    "max"   right=ExpressionLevel6)
	//    | ({ExpressionMinimum.left =current}    "min"   right=ExpressionLevel6)
	//    )*
	//;
	public ExpressionLevel5Elements getExpressionLevel5Access() {
		return pExpressionLevel5;
	}
	
	public ParserRule getExpressionLevel5Rule() {
		return getExpressionLevel5Access().getRule();
	}
	
	//ExpressionLevel6 returns Expression:        // Right associativity
	//    ExpressionLevel7
	//    ( ({ExpressionPower.left=current}       "^"     right=ExpressionLevel6)
	//    )?
	//;
	public ExpressionLevel6Elements getExpressionLevel6Access() {
		return pExpressionLevel6;
	}
	
	public ParserRule getExpressionLevel6Rule() {
		return getExpressionLevel6Access().getRule();
	}
	
	//ExpressionLevel7 returns Expression:
	//    ExpressionNot | ExpressionMinus | ExpressionPlus | ExpressionLevel8
	//;
	public ExpressionLevel7Elements getExpressionLevel7Access() {
		return pExpressionLevel7;
	}
	
	public ParserRule getExpressionLevel7Rule() {
		return getExpressionLevel7Access().getRule();
	}
	
	//ExpressionNot:
	//    ("NOT" | "not") sub=ExpressionLevel8
	//;
	public ExpressionNotElements getExpressionNotAccess() {
		return pExpressionNot;
	}
	
	public ParserRule getExpressionNotRule() {
		return getExpressionNotAccess().getRule();
	}
	
	//ExpressionMinus:
	//    "-" sub=ExpressionLevel8
	//;
	public ExpressionMinusElements getExpressionMinusAccess() {
		return pExpressionMinus;
	}
	
	public ParserRule getExpressionMinusRule() {
		return getExpressionMinusAccess().getRule();
	}
	
	//ExpressionPlus:
	//    "+" sub=ExpressionLevel8
	//;
	public ExpressionPlusElements getExpressionPlusAccess() {
		return pExpressionPlus;
	}
	
	public ParserRule getExpressionPlusRule() {
		return getExpressionPlusAccess().getRule();
	}
	
	//ExpressionLevel8:
	//    ExpressionBracket |
	//    ExpressionConstantBool |
	//    ExpressionConstantInt |
	//    ExpressionConstantReal |
	//    ExpressionConstantString |
	//    ExpressionVariable
	//;
	public ExpressionLevel8Elements getExpressionLevel8Access() {
		return pExpressionLevel8;
	}
	
	public ParserRule getExpressionLevel8Rule() {
		return getExpressionLevel8Access().getRule();
	}
	
	//ExpressionBracket:
	//    "(" sub=Expression ")"
	//;
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//ExpressionConstantBool:
	//    value=BOOL_LITERAL
	//;
	public ExpressionConstantBoolElements getExpressionConstantBoolAccess() {
		return pExpressionConstantBool;
	}
	
	public ParserRule getExpressionConstantBoolRule() {
		return getExpressionConstantBoolAccess().getRule();
	}
	
	//ExpressionConstantInt:
	//    value=INT
	//;
	public ExpressionConstantIntElements getExpressionConstantIntAccess() {
		return pExpressionConstantInt;
	}
	
	public ParserRule getExpressionConstantIntRule() {
		return getExpressionConstantIntAccess().getRule();
	}
	
	//ExpressionConstantReal:
	//    value=FLOAT
	//;
	public ExpressionConstantRealElements getExpressionConstantRealAccess() {
		return pExpressionConstantReal;
	}
	
	public ParserRule getExpressionConstantRealRule() {
		return getExpressionConstantRealAccess().getRule();
	}
	
	//ExpressionConstantString:
	//    value = STRING
	//;
	public ExpressionConstantStringElements getExpressionConstantStringAccess() {
		return pExpressionConstantString;
	}
	
	public ParserRule getExpressionConstantStringRule() {
		return getExpressionConstantStringAccess().getRule();
	}
	
	//ExpressionVariable:
	//    variable=[Variable | ID]
	//;
	public ExpressionVariableElements getExpressionVariableAccess() {
		return pExpressionVariable;
	}
	
	public ParserRule getExpressionVariableRule() {
		return getExpressionVariableAccess().getRule();
	}
	
	//terminal BOOL_LITERAL returns ecore::EBoolean:
	//    'true' | 'false' | 'TRUE' | 'FALSE' | 'True' | 'False'
	//;
	public TerminalRule getBOOL_LITERALRule() {
		return tBOOL_LITERAL;
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//    INT '.' INT (('E' | 'e') ('-')? INT)?
	//;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//Model :
	//    types += TypeDecl+
	//    //('variables' vars+=Variable+)?
	//;
	public BaseGrammarAccess.ModelElements getModelAccess() {
		return gaBase.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TypeDecl:
	//    EnumTypeDecl | SimpleTypeDecl
	//;
	public BaseGrammarAccess.TypeDeclElements getTypeDeclAccess() {
		return gaBase.getTypeDeclAccess();
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//SimpleTypeDecl :
	//    'type' name = ID
	//;
	public BaseGrammarAccess.SimpleTypeDeclElements getSimpleTypeDeclAccess() {
		return gaBase.getSimpleTypeDeclAccess();
	}
	
	public ParserRule getSimpleTypeDeclRule() {
		return getSimpleTypeDeclAccess().getRule();
	}
	
	//EnumTypeDecl:
	//    'enum' name = ID '{' literals+=EnumElement+ '}'
	//;
	public BaseGrammarAccess.EnumTypeDeclElements getEnumTypeDeclAccess() {
		return gaBase.getEnumTypeDeclAccess();
	}
	
	public ParserRule getEnumTypeDeclRule() {
		return getEnumTypeDeclAccess().getRule();
	}
	
	//EnumElement:
	//    name = ID
	//;
	public BaseGrammarAccess.EnumElementElements getEnumElementAccess() {
		return gaBase.getEnumElementAccess();
	}
	
	public ParserRule getEnumElementRule() {
		return getEnumElementAccess().getRule();
	}
	
	//Array:
	//    baseType = [TypeDecl | ID]'['']'
	//;
	public BaseGrammarAccess.ArrayElements getArrayAccess() {
		return gaBase.getArrayAccess();
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	////Variable: type = Type name= ID ;
	//Type :
	//    TypeRef | Array
	//;
	public BaseGrammarAccess.TypeElements getTypeAccess() {
		return gaBase.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeRef:
	//    type = [TypeDecl | ID]
	//;
	public BaseGrammarAccess.TypeRefElements getTypeRefAccess() {
		return gaBase.getTypeRefAccess();
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
