/**
 * generated by Xtext 2.25.0
 */
package org.artemis.sm.stateMachine.impl;

import org.artemis.sm.stateMachine.Event;
import org.artemis.sm.stateMachine.StateMachinePackage;
import org.artemis.sm.stateMachine.UntypedVariable;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.artemis.sm.stateMachine.impl.EventImpl#getTimeVar <em>Time Var</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventImpl extends MinimalEObjectImpl.Container implements Event
{
  /**
   * The cached value of the '{@link #getTimeVar() <em>Time Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeVar()
   * @generated
   * @ordered
   */
  protected UntypedVariable timeVar;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StateMachinePackage.Literals.EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UntypedVariable getTimeVar()
  {
    return timeVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeVar(UntypedVariable newTimeVar, NotificationChain msgs)
  {
    UntypedVariable oldTimeVar = timeVar;
    timeVar = newTimeVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StateMachinePackage.EVENT__TIME_VAR, oldTimeVar, newTimeVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeVar(UntypedVariable newTimeVar)
  {
    if (newTimeVar != timeVar)
    {
      NotificationChain msgs = null;
      if (timeVar != null)
        msgs = ((InternalEObject)timeVar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StateMachinePackage.EVENT__TIME_VAR, null, msgs);
      if (newTimeVar != null)
        msgs = ((InternalEObject)newTimeVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StateMachinePackage.EVENT__TIME_VAR, null, msgs);
      msgs = basicSetTimeVar(newTimeVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateMachinePackage.EVENT__TIME_VAR, newTimeVar, newTimeVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StateMachinePackage.EVENT__TIME_VAR:
        return basicSetTimeVar(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StateMachinePackage.EVENT__TIME_VAR:
        return getTimeVar();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StateMachinePackage.EVENT__TIME_VAR:
        setTimeVar((UntypedVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StateMachinePackage.EVENT__TIME_VAR:
        setTimeVar((UntypedVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StateMachinePackage.EVENT__TIME_VAR:
        return timeVar != null;
    }
    return super.eIsSet(featureID);
  }

} //EventImpl
