/**
 * generated by Xtext 2.25.0
 */
package org.artemis.sm.stateMachine.impl;

import org.artemis.sm.stateMachine.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StateMachineFactoryImpl extends EFactoryImpl implements StateMachineFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StateMachineFactory init()
  {
    try
    {
      StateMachineFactory theStateMachineFactory = (StateMachineFactory)EPackage.Registry.INSTANCE.getEFactory(StateMachinePackage.eNS_URI);
      if (theStateMachineFactory != null)
      {
        return theStateMachineFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StateMachineFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateMachineFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StateMachinePackage.MONITOR: return createMonitor();
      case StateMachinePackage.STATE_MACHINE: return createStateMachine();
      case StateMachinePackage.STATE: return createState();
      case StateMachinePackage.TRANSITION: return createTransition();
      case StateMachinePackage.EVENT: return createEvent();
      case StateMachinePackage.START_TASK: return createStartTask();
      case StateMachinePackage.END_TASK: return createEndTask();
      case StateMachinePackage.ANY_EVENT: return createAnyEvent();
      case StateMachinePackage.VARIABLE: return createVariable();
      case StateMachinePackage.UNTYPED_VARIABLE: return createUntypedVariable();
      case StateMachinePackage.TYPED_VARIABLE: return createTypedVariable();
      case StateMachinePackage.ACTION: return createAction();
      case StateMachinePackage.ASSIGNMENT_ACTION: return createAssignmentAction();
      case StateMachinePackage.ON_FAIL_ACTION: return createOnFailAction();
      case StateMachinePackage.RESTART_PATH: return createRestartPath();
      case StateMachinePackage.SKIP_PATH: return createSkipPath();
      case StateMachinePackage.RESTART_TASK: return createRestartTask();
      case StateMachinePackage.SKIP_TASK: return createSkipTask();
      case StateMachinePackage.EXPRESSION: return createExpression();
      case StateMachinePackage.EXPRESSION_NOT: return createExpressionNot();
      case StateMachinePackage.EXPRESSION_MINUS: return createExpressionMinus();
      case StateMachinePackage.EXPRESSION_PLUS: return createExpressionPlus();
      case StateMachinePackage.EXPRESSION_LEVEL8: return createExpressionLevel8();
      case StateMachinePackage.EXPRESSION_BRACKET: return createExpressionBracket();
      case StateMachinePackage.EXPRESSION_CONSTANT_BOOL: return createExpressionConstantBool();
      case StateMachinePackage.EXPRESSION_CONSTANT_INT: return createExpressionConstantInt();
      case StateMachinePackage.EXPRESSION_CONSTANT_REAL: return createExpressionConstantReal();
      case StateMachinePackage.EXPRESSION_CONSTANT_STRING: return createExpressionConstantString();
      case StateMachinePackage.EXPRESSION_VARIABLE: return createExpressionVariable();
      case StateMachinePackage.EXPRESSION_AND: return createExpressionAnd();
      case StateMachinePackage.EXPRESSION_OR: return createExpressionOr();
      case StateMachinePackage.EXPRESSION_EQUAL: return createExpressionEqual();
      case StateMachinePackage.EXPRESSION_NEQUAL: return createExpressionNEqual();
      case StateMachinePackage.EXPRESSION_GEQ: return createExpressionGeq();
      case StateMachinePackage.EXPRESSION_GREATER: return createExpressionGreater();
      case StateMachinePackage.EXPRESSION_LEQ: return createExpressionLeq();
      case StateMachinePackage.EXPRESSION_LESS: return createExpressionLess();
      case StateMachinePackage.EXPRESSION_ADDITION: return createExpressionAddition();
      case StateMachinePackage.EXPRESSION_SUBTRACTION: return createExpressionSubtraction();
      case StateMachinePackage.EXPRESSION_MULTIPLY: return createExpressionMultiply();
      case StateMachinePackage.EXPRESSION_DIVISION: return createExpressionDivision();
      case StateMachinePackage.EXPRESSION_MAXIMUM: return createExpressionMaximum();
      case StateMachinePackage.EXPRESSION_MINIMUM: return createExpressionMinimum();
      case StateMachinePackage.EXPRESSION_POWER: return createExpressionPower();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Monitor createMonitor()
  {
    MonitorImpl monitor = new MonitorImpl();
    return monitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachine createStateMachine()
  {
    StateMachineImpl stateMachine = new StateMachineImpl();
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartTask createStartTask()
  {
    StartTaskImpl startTask = new StartTaskImpl();
    return startTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndTask createEndTask()
  {
    EndTaskImpl endTask = new EndTaskImpl();
    return endTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnyEvent createAnyEvent()
  {
    AnyEventImpl anyEvent = new AnyEventImpl();
    return anyEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UntypedVariable createUntypedVariable()
  {
    UntypedVariableImpl untypedVariable = new UntypedVariableImpl();
    return untypedVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypedVariable createTypedVariable()
  {
    TypedVariableImpl typedVariable = new TypedVariableImpl();
    return typedVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignmentAction createAssignmentAction()
  {
    AssignmentActionImpl assignmentAction = new AssignmentActionImpl();
    return assignmentAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnFailAction createOnFailAction()
  {
    OnFailActionImpl onFailAction = new OnFailActionImpl();
    return onFailAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestartPath createRestartPath()
  {
    RestartPathImpl restartPath = new RestartPathImpl();
    return restartPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SkipPath createSkipPath()
  {
    SkipPathImpl skipPath = new SkipPathImpl();
    return skipPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RestartTask createRestartTask()
  {
    RestartTaskImpl restartTask = new RestartTaskImpl();
    return restartTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SkipTask createSkipTask()
  {
    SkipTaskImpl skipTask = new SkipTaskImpl();
    return skipTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionNot createExpressionNot()
  {
    ExpressionNotImpl expressionNot = new ExpressionNotImpl();
    return expressionNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMinus createExpressionMinus()
  {
    ExpressionMinusImpl expressionMinus = new ExpressionMinusImpl();
    return expressionMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionPlus createExpressionPlus()
  {
    ExpressionPlusImpl expressionPlus = new ExpressionPlusImpl();
    return expressionPlus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionLevel8 createExpressionLevel8()
  {
    ExpressionLevel8Impl expressionLevel8 = new ExpressionLevel8Impl();
    return expressionLevel8;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionBracket createExpressionBracket()
  {
    ExpressionBracketImpl expressionBracket = new ExpressionBracketImpl();
    return expressionBracket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionConstantBool createExpressionConstantBool()
  {
    ExpressionConstantBoolImpl expressionConstantBool = new ExpressionConstantBoolImpl();
    return expressionConstantBool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionConstantInt createExpressionConstantInt()
  {
    ExpressionConstantIntImpl expressionConstantInt = new ExpressionConstantIntImpl();
    return expressionConstantInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionConstantReal createExpressionConstantReal()
  {
    ExpressionConstantRealImpl expressionConstantReal = new ExpressionConstantRealImpl();
    return expressionConstantReal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionConstantString createExpressionConstantString()
  {
    ExpressionConstantStringImpl expressionConstantString = new ExpressionConstantStringImpl();
    return expressionConstantString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionVariable createExpressionVariable()
  {
    ExpressionVariableImpl expressionVariable = new ExpressionVariableImpl();
    return expressionVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionAnd createExpressionAnd()
  {
    ExpressionAndImpl expressionAnd = new ExpressionAndImpl();
    return expressionAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionOr createExpressionOr()
  {
    ExpressionOrImpl expressionOr = new ExpressionOrImpl();
    return expressionOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionEqual createExpressionEqual()
  {
    ExpressionEqualImpl expressionEqual = new ExpressionEqualImpl();
    return expressionEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionNEqual createExpressionNEqual()
  {
    ExpressionNEqualImpl expressionNEqual = new ExpressionNEqualImpl();
    return expressionNEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionGeq createExpressionGeq()
  {
    ExpressionGeqImpl expressionGeq = new ExpressionGeqImpl();
    return expressionGeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionGreater createExpressionGreater()
  {
    ExpressionGreaterImpl expressionGreater = new ExpressionGreaterImpl();
    return expressionGreater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionLeq createExpressionLeq()
  {
    ExpressionLeqImpl expressionLeq = new ExpressionLeqImpl();
    return expressionLeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionLess createExpressionLess()
  {
    ExpressionLessImpl expressionLess = new ExpressionLessImpl();
    return expressionLess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionAddition createExpressionAddition()
  {
    ExpressionAdditionImpl expressionAddition = new ExpressionAdditionImpl();
    return expressionAddition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionSubtraction createExpressionSubtraction()
  {
    ExpressionSubtractionImpl expressionSubtraction = new ExpressionSubtractionImpl();
    return expressionSubtraction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMultiply createExpressionMultiply()
  {
    ExpressionMultiplyImpl expressionMultiply = new ExpressionMultiplyImpl();
    return expressionMultiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionDivision createExpressionDivision()
  {
    ExpressionDivisionImpl expressionDivision = new ExpressionDivisionImpl();
    return expressionDivision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMaximum createExpressionMaximum()
  {
    ExpressionMaximumImpl expressionMaximum = new ExpressionMaximumImpl();
    return expressionMaximum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionMinimum createExpressionMinimum()
  {
    ExpressionMinimumImpl expressionMinimum = new ExpressionMinimumImpl();
    return expressionMinimum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionPower createExpressionPower()
  {
    ExpressionPowerImpl expressionPower = new ExpressionPowerImpl();
    return expressionPower;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachinePackage getStateMachinePackage()
  {
    return (StateMachinePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StateMachinePackage getPackage()
  {
    return StateMachinePackage.eINSTANCE;
  }

} //StateMachineFactoryImpl
