/*
 * generated by Xtext 2.25.0
 */
package org.artemis.sm.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.artemis.sm.services.StateMachineGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class StateMachineSyntacticSequencer extends AbstractSyntacticSequencer {

	protected StateMachineGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1;
	protected AbstractElementAlias match_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1;
	protected AbstractElementAlias match_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (StateMachineGrammarAccess) access;
		match_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getANDKeyword_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getAndKeyword_1_0_1_1()));
		match_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getORKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getExpressionLevel1Access().getOrKeyword_1_1_1_1()));
		match_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionNotAccess().getNOTKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getExpressionNotAccess().getNotKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1.equals(syntax))
				emit_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1.equals(syntax))
				emit_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1.equals(syntax))
				emit_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'AND' | 'and'
	 *
	 * This ambiguous syntax occurs at:
	 *     {ExpressionAnd.left=} (ambiguity) right=ExpressionLevel2
	 */
	protected void emit_ExpressionLevel1_ANDKeyword_1_0_1_0_or_AndKeyword_1_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'OR' | 'or'
	 *
	 * This ambiguous syntax occurs at:
	 *     {ExpressionOr.left=} (ambiguity) right=ExpressionLevel2
	 */
	protected void emit_ExpressionLevel1_ORKeyword_1_1_1_0_or_OrKeyword_1_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'NOT' | 'not'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) sub=ExpressionLevel8
	 */
	protected void emit_ExpressionNot_NOTKeyword_0_0_or_NotKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
