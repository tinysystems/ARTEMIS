/*
 * generated by Xtext 2.25.0
 */
package org.artemis.sm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.artemis.sm.ide.contentassist.antlr.internal.InternalStateMachineParser;
import org.artemis.sm.services.StateMachineGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class StateMachineParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StateMachineGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StateMachineGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getOnFailActionAccess().getAlternatives(), "rule__OnFailAction__Alternatives");
			builder.put(grammarAccess.getExpressionLevel1Access().getAlternatives_1(), "rule__ExpressionLevel1__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel1Access().getAlternatives_1_0_1(), "rule__ExpressionLevel1__Alternatives_1_0_1");
			builder.put(grammarAccess.getExpressionLevel1Access().getAlternatives_1_1_1(), "rule__ExpressionLevel1__Alternatives_1_1_1");
			builder.put(grammarAccess.getExpressionLevel2Access().getAlternatives_1(), "rule__ExpressionLevel2__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel3Access().getAlternatives_1(), "rule__ExpressionLevel3__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel4Access().getAlternatives_1(), "rule__ExpressionLevel4__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel5Access().getAlternatives_1(), "rule__ExpressionLevel5__Alternatives_1");
			builder.put(grammarAccess.getExpressionLevel7Access().getAlternatives(), "rule__ExpressionLevel7__Alternatives");
			builder.put(grammarAccess.getExpressionNotAccess().getAlternatives_0(), "rule__ExpressionNot__Alternatives_0");
			builder.put(grammarAccess.getExpressionLevel8Access().getAlternatives(), "rule__ExpressionLevel8__Alternatives");
			builder.put(grammarAccess.getTypeDeclAccess().getAlternatives(), "rule__TypeDecl__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
			builder.put(grammarAccess.getStateMachineAccess().getGroup_3(), "rule__StateMachine__Group_3__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_2(), "rule__Transition__Group_2__0");
			builder.put(grammarAccess.getStartTaskAccess().getGroup(), "rule__StartTask__Group__0");
			builder.put(grammarAccess.getEndTaskAccess().getGroup(), "rule__EndTask__Group__0");
			builder.put(grammarAccess.getAnyEventAccess().getGroup(), "rule__AnyEvent__Group__0");
			builder.put(grammarAccess.getTypedVariableAccess().getGroup(), "rule__TypedVariable__Group__0");
			builder.put(grammarAccess.getTypedVariableAccess().getGroup_2(), "rule__TypedVariable__Group_2__0");
			builder.put(grammarAccess.getAssignmentActionAccess().getGroup(), "rule__AssignmentAction__Group__0");
			builder.put(grammarAccess.getRestartPathAccess().getGroup(), "rule__RestartPath__Group__0");
			builder.put(grammarAccess.getRestartPathAccess().getGroup_2(), "rule__RestartPath__Group_2__0");
			builder.put(grammarAccess.getSkipPathAccess().getGroup(), "rule__SkipPath__Group__0");
			builder.put(grammarAccess.getSkipPathAccess().getGroup_2(), "rule__SkipPath__Group_2__0");
			builder.put(grammarAccess.getRestartTaskAccess().getGroup(), "rule__RestartTask__Group__0");
			builder.put(grammarAccess.getSkipTaskAccess().getGroup(), "rule__SkipTask__Group__0");
			builder.put(grammarAccess.getExpressionLevel1Access().getGroup(), "rule__ExpressionLevel1__Group__0");
			builder.put(grammarAccess.getExpressionLevel1Access().getGroup_1_0(), "rule__ExpressionLevel1__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel1Access().getGroup_1_1(), "rule__ExpressionLevel1__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel2Access().getGroup(), "rule__ExpressionLevel2__Group__0");
			builder.put(grammarAccess.getExpressionLevel2Access().getGroup_1_0(), "rule__ExpressionLevel2__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel2Access().getGroup_1_1(), "rule__ExpressionLevel2__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup(), "rule__ExpressionLevel3__Group__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_0(), "rule__ExpressionLevel3__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_1(), "rule__ExpressionLevel3__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_2(), "rule__ExpressionLevel3__Group_1_2__0");
			builder.put(grammarAccess.getExpressionLevel3Access().getGroup_1_3(), "rule__ExpressionLevel3__Group_1_3__0");
			builder.put(grammarAccess.getExpressionLevel4Access().getGroup(), "rule__ExpressionLevel4__Group__0");
			builder.put(grammarAccess.getExpressionLevel4Access().getGroup_1_0(), "rule__ExpressionLevel4__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel4Access().getGroup_1_1(), "rule__ExpressionLevel4__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup(), "rule__ExpressionLevel5__Group__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_0(), "rule__ExpressionLevel5__Group_1_0__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_1(), "rule__ExpressionLevel5__Group_1_1__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_2(), "rule__ExpressionLevel5__Group_1_2__0");
			builder.put(grammarAccess.getExpressionLevel5Access().getGroup_1_3(), "rule__ExpressionLevel5__Group_1_3__0");
			builder.put(grammarAccess.getExpressionLevel6Access().getGroup(), "rule__ExpressionLevel6__Group__0");
			builder.put(grammarAccess.getExpressionLevel6Access().getGroup_1(), "rule__ExpressionLevel6__Group_1__0");
			builder.put(grammarAccess.getExpressionNotAccess().getGroup(), "rule__ExpressionNot__Group__0");
			builder.put(grammarAccess.getExpressionMinusAccess().getGroup(), "rule__ExpressionMinus__Group__0");
			builder.put(grammarAccess.getExpressionPlusAccess().getGroup(), "rule__ExpressionPlus__Group__0");
			builder.put(grammarAccess.getExpressionBracketAccess().getGroup(), "rule__ExpressionBracket__Group__0");
			builder.put(grammarAccess.getSimpleTypeDeclAccess().getGroup(), "rule__SimpleTypeDecl__Group__0");
			builder.put(grammarAccess.getEnumTypeDeclAccess().getGroup(), "rule__EnumTypeDecl__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
			builder.put(grammarAccess.getMonitorAccess().getMachinesAssignment(), "rule__Monitor__MachinesAssignment");
			builder.put(grammarAccess.getStateMachineAccess().getNameAssignment_1(), "rule__StateMachine__NameAssignment_1");
			builder.put(grammarAccess.getStateMachineAccess().getVarsAssignment_3_1(), "rule__StateMachine__VarsAssignment_3_1");
			builder.put(grammarAccess.getStateMachineAccess().getStatesAssignment_4(), "rule__StateMachine__StatesAssignment_4");
			builder.put(grammarAccess.getStateAccess().getInitialAssignment_0(), "rule__State__InitialAssignment_0");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
			builder.put(grammarAccess.getStateAccess().getTransitionsAssignment_4(), "rule__State__TransitionsAssignment_4");
			builder.put(grammarAccess.getTransitionAccess().getEventAssignment_1(), "rule__Transition__EventAssignment_1");
			builder.put(grammarAccess.getTransitionAccess().getGuardAssignment_2_1(), "rule__Transition__GuardAssignment_2_1");
			builder.put(grammarAccess.getTransitionAccess().getActionsAssignment_3(), "rule__Transition__ActionsAssignment_3");
			builder.put(grammarAccess.getTransitionAccess().getOnFailAssignment_4(), "rule__Transition__OnFailAssignment_4");
			builder.put(grammarAccess.getTransitionAccess().getNextAssignment_7(), "rule__Transition__NextAssignment_7");
			builder.put(grammarAccess.getStartTaskAccess().getTaskAssignment_2(), "rule__StartTask__TaskAssignment_2");
			builder.put(grammarAccess.getStartTaskAccess().getTimeVarAssignment_4(), "rule__StartTask__TimeVarAssignment_4");
			builder.put(grammarAccess.getEndTaskAccess().getTaskAssignment_2(), "rule__EndTask__TaskAssignment_2");
			builder.put(grammarAccess.getEndTaskAccess().getTimeVarAssignment_4(), "rule__EndTask__TimeVarAssignment_4");
			builder.put(grammarAccess.getAnyEventAccess().getTimeVarAssignment_2(), "rule__AnyEvent__TimeVarAssignment_2");
			builder.put(grammarAccess.getUntypedVariableAccess().getNameAssignment(), "rule__UntypedVariable__NameAssignment");
			builder.put(grammarAccess.getTypedVariableAccess().getTypeAssignment_0(), "rule__TypedVariable__TypeAssignment_0");
			builder.put(grammarAccess.getTypedVariableAccess().getNameAssignment_1(), "rule__TypedVariable__NameAssignment_1");
			builder.put(grammarAccess.getTypedVariableAccess().getExprAssignment_2_1(), "rule__TypedVariable__ExprAssignment_2_1");
			builder.put(grammarAccess.getAssignmentActionAccess().getVarAssignment_0(), "rule__AssignmentAction__VarAssignment_0");
			builder.put(grammarAccess.getAssignmentActionAccess().getExprAssignment_2(), "rule__AssignmentAction__ExprAssignment_2");
			builder.put(grammarAccess.getRestartPathAccess().getPathAssignment_2_1(), "rule__RestartPath__PathAssignment_2_1");
			builder.put(grammarAccess.getSkipPathAccess().getPathAssignment_2_1(), "rule__SkipPath__PathAssignment_2_1");
			builder.put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel1__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel1Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel1__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel2__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel2Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel2__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel3__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel3__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_2_2(), "rule__ExpressionLevel3__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpressionLevel3Access().getRightAssignment_1_3_2(), "rule__ExpressionLevel3__RightAssignment_1_3_2");
			builder.put(grammarAccess.getExpressionLevel4Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel4__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel4Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel4__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_0_2(), "rule__ExpressionLevel5__RightAssignment_1_0_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_1_2(), "rule__ExpressionLevel5__RightAssignment_1_1_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_2_2(), "rule__ExpressionLevel5__RightAssignment_1_2_2");
			builder.put(grammarAccess.getExpressionLevel5Access().getRightAssignment_1_3_2(), "rule__ExpressionLevel5__RightAssignment_1_3_2");
			builder.put(grammarAccess.getExpressionLevel6Access().getRightAssignment_1_2(), "rule__ExpressionLevel6__RightAssignment_1_2");
			builder.put(grammarAccess.getExpressionNotAccess().getSubAssignment_1(), "rule__ExpressionNot__SubAssignment_1");
			builder.put(grammarAccess.getExpressionMinusAccess().getSubAssignment_1(), "rule__ExpressionMinus__SubAssignment_1");
			builder.put(grammarAccess.getExpressionPlusAccess().getSubAssignment_1(), "rule__ExpressionPlus__SubAssignment_1");
			builder.put(grammarAccess.getExpressionBracketAccess().getSubAssignment_1(), "rule__ExpressionBracket__SubAssignment_1");
			builder.put(grammarAccess.getExpressionConstantBoolAccess().getValueAssignment(), "rule__ExpressionConstantBool__ValueAssignment");
			builder.put(grammarAccess.getExpressionConstantIntAccess().getValueAssignment(), "rule__ExpressionConstantInt__ValueAssignment");
			builder.put(grammarAccess.getExpressionConstantRealAccess().getValueAssignment(), "rule__ExpressionConstantReal__ValueAssignment");
			builder.put(grammarAccess.getExpressionConstantStringAccess().getValueAssignment(), "rule__ExpressionConstantString__ValueAssignment");
			builder.put(grammarAccess.getExpressionVariableAccess().getVariableAssignment(), "rule__ExpressionVariable__VariableAssignment");
			builder.put(grammarAccess.getModelAccess().getTypesAssignment(), "rule__Model__TypesAssignment");
			builder.put(grammarAccess.getSimpleTypeDeclAccess().getNameAssignment_1(), "rule__SimpleTypeDecl__NameAssignment_1");
			builder.put(grammarAccess.getEnumTypeDeclAccess().getNameAssignment_1(), "rule__EnumTypeDecl__NameAssignment_1");
			builder.put(grammarAccess.getEnumTypeDeclAccess().getLiteralsAssignment_3(), "rule__EnumTypeDecl__LiteralsAssignment_3");
			builder.put(grammarAccess.getEnumElementAccess().getNameAssignment(), "rule__EnumElement__NameAssignment");
			builder.put(grammarAccess.getArrayAccess().getBaseTypeAssignment_0(), "rule__Array__BaseTypeAssignment_0");
			builder.put(grammarAccess.getTypeRefAccess().getTypeAssignment(), "rule__TypeRef__TypeAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StateMachineGrammarAccess grammarAccess;

	@Override
	protected InternalStateMachineParser createParser() {
		InternalStateMachineParser result = new InternalStateMachineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateMachineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateMachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
